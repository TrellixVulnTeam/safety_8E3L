{"ast":null,"code":"const chalk = require('chalk');\n\nconst nocolor = {\n  bold: s => s,\n  dim: s => s,\n  red: s => s,\n  yellow: s => s,\n  cyan: s => s,\n  magenta: s => s,\n  blue: s => s\n};\n\nconst explainNode = (node, depth, color) => printNode(node, color) + explainDependents(node, depth, color);\n\nconst colorType = (type, color) => {\n  const {\n    red,\n    yellow,\n    cyan,\n    magenta,\n    blue\n  } = color ? chalk : nocolor;\n  const style = type === 'extraneous' ? red : type === 'dev' ? yellow : type === 'optional' ? cyan : type === 'peer' ? magenta : type === 'bundled' ? blue :\n  /* istanbul ignore next */\n  s => s;\n  return style(type);\n};\n\nconst printNode = (node, color) => {\n  const {\n    name,\n    version,\n    location,\n    extraneous,\n    dev,\n    optional,\n    peer,\n    bundled\n  } = node;\n  const {\n    bold,\n    dim\n  } = color ? chalk : nocolor;\n  const extra = [];\n  if (extraneous) extra.push(' ' + bold(colorType('extraneous', color)));\n  if (dev) extra.push(' ' + bold(colorType('dev', color)));\n  if (optional) extra.push(' ' + bold(colorType('optional', color)));\n  if (peer) extra.push(' ' + bold(colorType('peer', color)));\n  if (bundled) extra.push(' ' + bold(colorType('bundled', color)));\n  return `${bold(name)}@${bold(version)}${extra.join('')}` + (location ? dim(`\\n${location}`) : '');\n};\n\nconst explainDependents = ({\n  name,\n  dependents\n}, depth, color) => {\n  if (!dependents || !dependents.length || depth <= 0) return '';\n  const max = Math.ceil(depth / 2);\n  const messages = dependents.slice(0, max).map(edge => explainEdge(edge, depth, color)); // show just the names of the first 5 deps that overflowed the list\n\n  if (dependents.length > max) {\n    let len = 0;\n    const maxLen = 50;\n    const showNames = [];\n\n    for (let i = max; i < dependents.length; i++) {\n      const {\n        from: {\n          name = 'the root project'\n        }\n      } = dependents[i];\n      len += name.length;\n\n      if (len >= maxLen && i < dependents.length - 1) {\n        showNames.push('...');\n        break;\n      }\n\n      showNames.push(name);\n    }\n\n    const show = `(${showNames.join(', ')})`;\n    messages.push(`${dependents.length - max} more ${show}`);\n  }\n\n  const str = '\\n' + messages.join('\\n');\n  return str.split('\\n').join('\\n  ');\n};\n\nconst explainEdge = ({\n  name,\n  type,\n  bundled,\n  from,\n  spec\n}, depth, color) => {\n  const {\n    bold\n  } = color ? chalk : nocolor;\n  return (type === 'prod' ? '' : `${colorType(type, color)} `) + (bundled ? `${colorType('bundled', color)} ` : '') + `${bold(name)}@\"${bold(spec)}\" from ` + explainFrom(from, depth, color);\n};\n\nconst explainFrom = (from, depth, color) => {\n  if (!from.name && !from.version) return 'the root project';\n  return printNode(from, color) + explainDependents(from, depth - 1, color);\n};\n\nmodule.exports = {\n  explainNode,\n  printNode,\n  explainEdge\n};","map":{"version":3,"sources":["/Users/kaelen/nsc-mds/node_modules/npm/lib/utils/explain-dep.js"],"names":["chalk","require","nocolor","bold","s","dim","red","yellow","cyan","magenta","blue","explainNode","node","depth","color","printNode","explainDependents","colorType","type","style","name","version","location","extraneous","dev","optional","peer","bundled","extra","push","join","dependents","length","max","Math","ceil","messages","slice","map","edge","explainEdge","len","maxLen","showNames","i","from","show","str","split","spec","explainFrom","module","exports"],"mappings":"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","sourcesContent":["const chalk = require('chalk')\nconst nocolor = {\n  bold: s => s,\n  dim: s => s,\n  red: s => s,\n  yellow: s => s,\n  cyan: s => s,\n  magenta: s => s,\n  blue: s => s,\n}\n\nconst explainNode = (node, depth, color) =>\n  printNode(node, color) +\n  explainDependents(node, depth, color)\n\nconst colorType = (type, color) => {\n  const { red, yellow, cyan, magenta, blue } = color ? chalk : nocolor\n  const style = type === 'extraneous' ? red\n    : type === 'dev' ? yellow\n    : type === 'optional' ? cyan\n    : type === 'peer' ? magenta\n    : type === 'bundled' ? blue\n    : /* istanbul ignore next */ s => s\n  return style(type)\n}\n\nconst printNode = (node, color) => {\n  const {\n    name,\n    version,\n    location,\n    extraneous,\n    dev,\n    optional,\n    peer,\n    bundled,\n  } = node\n  const { bold, dim } = color ? chalk : nocolor\n  const extra = []\n  if (extraneous)\n    extra.push(' ' + bold(colorType('extraneous', color)))\n\n  if (dev)\n    extra.push(' ' + bold(colorType('dev', color)))\n\n  if (optional)\n    extra.push(' ' + bold(colorType('optional', color)))\n\n  if (peer)\n    extra.push(' ' + bold(colorType('peer', color)))\n\n  if (bundled)\n    extra.push(' ' + bold(colorType('bundled', color)))\n\n  return `${bold(name)}@${bold(version)}${extra.join('')}` +\n    (location ? dim(`\\n${location}`) : '')\n}\n\nconst explainDependents = ({ name, dependents }, depth, color) => {\n  if (!dependents || !dependents.length || depth <= 0)\n    return ''\n\n  const max = Math.ceil(depth / 2)\n  const messages = dependents.slice(0, max)\n    .map(edge => explainEdge(edge, depth, color))\n\n  // show just the names of the first 5 deps that overflowed the list\n  if (dependents.length > max) {\n    let len = 0\n    const maxLen = 50\n    const showNames = []\n    for (let i = max; i < dependents.length; i++) {\n      const { from: { name = 'the root project' } } = dependents[i]\n      len += name.length\n      if (len >= maxLen && i < dependents.length - 1) {\n        showNames.push('...')\n        break\n      }\n      showNames.push(name)\n    }\n    const show = `(${showNames.join(', ')})`\n    messages.push(`${dependents.length - max} more ${show}`)\n  }\n\n  const str = '\\n' + messages.join('\\n')\n  return str.split('\\n').join('\\n  ')\n}\n\nconst explainEdge = ({ name, type, bundled, from, spec }, depth, color) => {\n  const { bold } = color ? chalk : nocolor\n  return (type === 'prod' ? '' : `${colorType(type, color)} `) +\n    (bundled ? `${colorType('bundled', color)} ` : '') +\n    `${bold(name)}@\"${bold(spec)}\" from ` +\n    explainFrom(from, depth, color)\n}\n\nconst explainFrom = (from, depth, color) => {\n  if (!from.name && !from.version)\n    return 'the root project'\n\n  return printNode(from, color) +\n    explainDependents(from, depth - 1, color)\n}\n\nmodule.exports = { explainNode, printNode, explainEdge }\n"]},"metadata":{},"sourceType":"script"}