{"ast":null,"code":"const log = require('npmlog');\n\nconst pacote = require('pacote');\n\nconst getWorkspaces = require('./workspaces/get-workspaces.js');\n\nconst {\n  URL\n} = require('url');\n\nconst hostedFromMani = require('./utils/hosted-git-info-from-manifest.js');\n\nconst openUrl = require('./utils/open-url.js');\n\nconst BaseCommand = require('./base-command.js');\n\nclass Repo extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Open package repository page in the browser';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'repo';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['browser', 'workspace', 'workspaces'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['[<pkgname> [<pkgname> ...]]'];\n  }\n\n  exec(args, cb) {\n    this.repo(args).then(() => cb()).catch(cb);\n  }\n\n  execWorkspaces(args, filters, cb) {\n    this.repoWorkspaces(args, filters).then(() => cb()).catch(cb);\n  }\n\n  async repo(args) {\n    if (!args || !args.length) args = ['.'];\n    await Promise.all(args.map(pkg => this.get(pkg)));\n  }\n\n  async repoWorkspaces(args, filters) {\n    const workspaces = await getWorkspaces(filters, {\n      path: this.npm.localPrefix\n    });\n    return this.repo([...workspaces.values()]);\n  }\n\n  async get(pkg) {\n    const opts = { ...this.npm.flatOptions,\n      fullMetadata: true\n    };\n    const mani = await pacote.manifest(pkg, opts);\n    const r = mani.repository;\n    const rurl = !r ? null : typeof r === 'string' ? r : typeof r === 'object' && typeof r.url === 'string' ? r.url : null;\n\n    if (!rurl) {\n      throw Object.assign(new Error('no repository'), {\n        pkgid: pkg\n      });\n    }\n\n    const info = hostedFromMani(mani);\n    const url = info ? info.browse(mani.repository.directory) : unknownHostedUrl(rurl);\n\n    if (!url) {\n      throw Object.assign(new Error('no repository: could not get url'), {\n        pkgid: pkg\n      });\n    }\n\n    log.silly('docs', 'url', url);\n    await openUrl(this.npm, url, `${mani.name} repo available at the following URL`);\n  }\n\n}\n\nmodule.exports = Repo;\n\nconst unknownHostedUrl = url => {\n  try {\n    const {\n      protocol,\n      hostname,\n      pathname\n    } = new URL(url);\n    /* istanbul ignore next - URL ctor should prevent this */\n\n    if (!protocol || !hostname) return null;\n    const proto = /(git\\+)http:$/.test(protocol) ? 'http:' : 'https:';\n    const path = pathname.replace(/\\.git$/, '');\n    return `${proto}//${hostname}${path}`;\n  } catch (e) {\n    return null;\n  }\n};","map":{"version":3,"sources":["/Users/kaelen/nsc-mds/node_modules/npm/lib/repo.js"],"names":["log","require","pacote","getWorkspaces","URL","hostedFromMani","openUrl","BaseCommand","Repo","description","name","params","usage","exec","args","cb","repo","then","catch","execWorkspaces","filters","repoWorkspaces","length","Promise","all","map","pkg","get","workspaces","path","npm","localPrefix","values","opts","flatOptions","fullMetadata","mani","manifest","r","repository","rurl","url","Object","assign","Error","pkgid","info","browse","directory","unknownHostedUrl","silly","module","exports","protocol","hostname","pathname","proto","test","replace","e"],"mappings":"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","sourcesContent":["const log = require('npmlog')\nconst pacote = require('pacote')\nconst getWorkspaces = require('./workspaces/get-workspaces.js')\nconst { URL } = require('url')\n\nconst hostedFromMani = require('./utils/hosted-git-info-from-manifest.js')\nconst openUrl = require('./utils/open-url.js')\n\nconst BaseCommand = require('./base-command.js')\nclass Repo extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Open package repository page in the browser'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'repo'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['browser', 'workspace', 'workspaces']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[<pkgname> [<pkgname> ...]]']\n  }\n\n  exec (args, cb) {\n    this.repo(args).then(() => cb()).catch(cb)\n  }\n\n  execWorkspaces (args, filters, cb) {\n    this.repoWorkspaces(args, filters).then(() => cb()).catch(cb)\n  }\n\n  async repo (args) {\n    if (!args || !args.length)\n      args = ['.']\n\n    await Promise.all(args.map(pkg => this.get(pkg)))\n  }\n\n  async repoWorkspaces (args, filters) {\n    const workspaces =\n      await getWorkspaces(filters, { path: this.npm.localPrefix })\n    return this.repo([...workspaces.values()])\n  }\n\n  async get (pkg) {\n    const opts = { ...this.npm.flatOptions, fullMetadata: true }\n    const mani = await pacote.manifest(pkg, opts)\n\n    const r = mani.repository\n    const rurl = !r ? null\n      : typeof r === 'string' ? r\n      : typeof r === 'object' && typeof r.url === 'string' ? r.url\n      : null\n\n    if (!rurl) {\n      throw Object.assign(new Error('no repository'), {\n        pkgid: pkg,\n      })\n    }\n\n    const info = hostedFromMani(mani)\n    const url = info ?\n      info.browse(mani.repository.directory) : unknownHostedUrl(rurl)\n\n    if (!url) {\n      throw Object.assign(new Error('no repository: could not get url'), {\n        pkgid: pkg,\n      })\n    }\n\n    log.silly('docs', 'url', url)\n    await openUrl(this.npm, url, `${mani.name} repo available at the following URL`)\n  }\n}\nmodule.exports = Repo\n\nconst unknownHostedUrl = url => {\n  try {\n    const {\n      protocol,\n      hostname,\n      pathname,\n    } = new URL(url)\n\n    /* istanbul ignore next - URL ctor should prevent this */\n    if (!protocol || !hostname)\n      return null\n\n    const proto = /(git\\+)http:$/.test(protocol) ? 'http:' : 'https:'\n    const path = pathname.replace(/\\.git$/, '')\n    return `${proto}//${hostname}${path}`\n  } catch (e) {\n    return null\n  }\n}\n"]},"metadata":{},"sourceType":"script"}