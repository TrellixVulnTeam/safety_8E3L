{"ast":null,"code":"const log = require('npmlog');\n\nconst pacote = require('pacote');\n\nconst openUrl = require('./utils/open-url.js');\n\nconst hostedFromMani = require('./utils/hosted-git-info-from-manifest.js');\n\nconst getWorkspaces = require('./workspaces/get-workspaces.js');\n\nconst BaseCommand = require('./base-command.js');\n\nclass Docs extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Open documentation for a package in a web browser';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'docs';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['browser', 'registry', 'workspace', 'workspaces'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['[<pkgname> [<pkgname> ...]]'];\n  }\n\n  exec(args, cb) {\n    this.docs(args).then(() => cb()).catch(cb);\n  }\n\n  execWorkspaces(args, filters, cb) {\n    this.docsWorkspaces(args, filters).then(() => cb()).catch(cb);\n  }\n\n  async docs(args) {\n    if (!args || !args.length) args = ['.'];\n    await Promise.all(args.map(pkg => this.getDocs(pkg)));\n  }\n\n  async docsWorkspaces(args, filters) {\n    const workspaces = await getWorkspaces(filters, {\n      path: this.npm.localPrefix\n    });\n    return this.docs([...workspaces.values()]);\n  }\n\n  async getDocs(pkg) {\n    const opts = { ...this.npm.flatOptions,\n      fullMetadata: true\n    };\n    const mani = await pacote.manifest(pkg, opts);\n    const url = this.getDocsUrl(mani);\n    log.silly('docs', 'url', url);\n    await openUrl(this.npm, url, `${mani.name} docs available at the following URL`);\n  }\n\n  getDocsUrl(mani) {\n    if (mani.homepage) return mani.homepage;\n    const info = hostedFromMani(mani);\n    if (info) return info.docs();\n    return 'https://www.npmjs.com/package/' + mani.name;\n  }\n\n}\n\nmodule.exports = Docs;","map":{"version":3,"sources":["/Users/kaelen/nsc-mds/node_modules/npm/lib/docs.js"],"names":["log","require","pacote","openUrl","hostedFromMani","getWorkspaces","BaseCommand","Docs","description","name","params","usage","exec","args","cb","docs","then","catch","execWorkspaces","filters","docsWorkspaces","length","Promise","all","map","pkg","getDocs","workspaces","path","npm","localPrefix","values","opts","flatOptions","fullMetadata","mani","manifest","url","getDocsUrl","silly","homepage","info","module","exports"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,qBAAD,CAAvB;;AACA,MAAMG,cAAc,GAAGH,OAAO,CAAC,0CAAD,CAA9B;;AACA,MAAMI,aAAa,GAAGJ,OAAO,CAAC,gCAAD,CAA7B;;AAEA,MAAMK,WAAW,GAAGL,OAAO,CAAC,mBAAD,CAA3B;;AACA,MAAMM,IAAN,SAAmBD,WAAnB,CAA+B;AAC7B;AACsB,aAAXE,WAAW,GAAI;AACxB,WAAO,mDAAP;AACD;AAED;;;AACe,aAAJC,IAAI,GAAI;AACjB,WAAO,MAAP;AACD;AAED;;;AACiB,aAANC,MAAM,GAAI;AACnB,WAAO,CAAC,SAAD,EAAY,UAAZ,EAAwB,WAAxB,EAAqC,YAArC,CAAP;AACD;AAED;;;AACgB,aAALC,KAAK,GAAI;AAClB,WAAO,CAAC,6BAAD,CAAP;AACD;;AAEDC,EAAAA,IAAI,CAAEC,IAAF,EAAQC,EAAR,EAAY;AACd,SAAKC,IAAL,CAAUF,IAAV,EAAgBG,IAAhB,CAAqB,MAAMF,EAAE,EAA7B,EAAiCG,KAAjC,CAAuCH,EAAvC;AACD;;AAEDI,EAAAA,cAAc,CAAEL,IAAF,EAAQM,OAAR,EAAiBL,EAAjB,EAAqB;AACjC,SAAKM,cAAL,CAAoBP,IAApB,EAA0BM,OAA1B,EAAmCH,IAAnC,CAAwC,MAAMF,EAAE,EAAhD,EAAoDG,KAApD,CAA0DH,EAA1D;AACD;;AAES,QAAJC,IAAI,CAAEF,IAAF,EAAQ;AAChB,QAAI,CAACA,IAAD,IAAS,CAACA,IAAI,CAACQ,MAAnB,EACER,IAAI,GAAG,CAAC,GAAD,CAAP;AAEF,UAAMS,OAAO,CAACC,GAAR,CAAYV,IAAI,CAACW,GAAL,CAASC,GAAG,IAAI,KAAKC,OAAL,CAAaD,GAAb,CAAhB,CAAZ,CAAN;AACD;;AAEmB,QAAdL,cAAc,CAAEP,IAAF,EAAQM,OAAR,EAAiB;AACnC,UAAMQ,UAAU,GACd,MAAMtB,aAAa,CAACc,OAAD,EAAU;AAAES,MAAAA,IAAI,EAAE,KAAKC,GAAL,CAASC;AAAjB,KAAV,CADrB;AAEA,WAAO,KAAKf,IAAL,CAAU,CAAC,GAAGY,UAAU,CAACI,MAAX,EAAJ,CAAV,CAAP;AACD;;AAEY,QAAPL,OAAO,CAAED,GAAF,EAAO;AAClB,UAAMO,IAAI,GAAG,EAAE,GAAG,KAAKH,GAAL,CAASI,WAAd;AAA2BC,MAAAA,YAAY,EAAE;AAAzC,KAAb;AACA,UAAMC,IAAI,GAAG,MAAMjC,MAAM,CAACkC,QAAP,CAAgBX,GAAhB,EAAqBO,IAArB,CAAnB;AACA,UAAMK,GAAG,GAAG,KAAKC,UAAL,CAAgBH,IAAhB,CAAZ;AACAnC,IAAAA,GAAG,CAACuC,KAAJ,CAAU,MAAV,EAAkB,KAAlB,EAAyBF,GAAzB;AACA,UAAMlC,OAAO,CAAC,KAAK0B,GAAN,EAAWQ,GAAX,EAAiB,GAAEF,IAAI,CAAC1B,IAAK,sCAA7B,CAAb;AACD;;AAED6B,EAAAA,UAAU,CAAEH,IAAF,EAAQ;AAChB,QAAIA,IAAI,CAACK,QAAT,EACE,OAAOL,IAAI,CAACK,QAAZ;AAEF,UAAMC,IAAI,GAAGrC,cAAc,CAAC+B,IAAD,CAA3B;AACA,QAAIM,IAAJ,EACE,OAAOA,IAAI,CAAC1B,IAAL,EAAP;AAEF,WAAO,mCAAmCoB,IAAI,CAAC1B,IAA/C;AACD;;AA3D4B;;AA6D/BiC,MAAM,CAACC,OAAP,GAAiBpC,IAAjB","sourcesContent":["const log = require('npmlog')\nconst pacote = require('pacote')\nconst openUrl = require('./utils/open-url.js')\nconst hostedFromMani = require('./utils/hosted-git-info-from-manifest.js')\nconst getWorkspaces = require('./workspaces/get-workspaces.js')\n\nconst BaseCommand = require('./base-command.js')\nclass Docs extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Open documentation for a package in a web browser'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'docs'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['browser', 'registry', 'workspace', 'workspaces']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[<pkgname> [<pkgname> ...]]']\n  }\n\n  exec (args, cb) {\n    this.docs(args).then(() => cb()).catch(cb)\n  }\n\n  execWorkspaces (args, filters, cb) {\n    this.docsWorkspaces(args, filters).then(() => cb()).catch(cb)\n  }\n\n  async docs (args) {\n    if (!args || !args.length)\n      args = ['.']\n\n    await Promise.all(args.map(pkg => this.getDocs(pkg)))\n  }\n\n  async docsWorkspaces (args, filters) {\n    const workspaces =\n      await getWorkspaces(filters, { path: this.npm.localPrefix })\n    return this.docs([...workspaces.values()])\n  }\n\n  async getDocs (pkg) {\n    const opts = { ...this.npm.flatOptions, fullMetadata: true }\n    const mani = await pacote.manifest(pkg, opts)\n    const url = this.getDocsUrl(mani)\n    log.silly('docs', 'url', url)\n    await openUrl(this.npm, url, `${mani.name} docs available at the following URL`)\n  }\n\n  getDocsUrl (mani) {\n    if (mani.homepage)\n      return mani.homepage\n\n    const info = hostedFromMani(mani)\n    if (info)\n      return info.docs()\n\n    return 'https://www.npmjs.com/package/' + mani.name\n  }\n}\nmodule.exports = Docs\n"]},"metadata":{},"sourceType":"script"}