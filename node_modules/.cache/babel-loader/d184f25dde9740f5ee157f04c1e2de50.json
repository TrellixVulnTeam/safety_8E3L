{"ast":null,"code":"const libversion = require('libnpmversion');\n\nconst BaseCommand = require('./base-command.js');\n\nclass Version extends BaseCommand {\n  static get description() {\n    return 'Bump a package version';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'version';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['[<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease [--preid=<prerelease-id>] | from-git]'];\n  }\n\n  async completion(opts) {\n    const {\n      conf: {\n        argv: {\n          remain\n        }\n      }\n    } = opts;\n    if (remain.length > 2) return [];\n    return ['major', 'minor', 'patch', 'premajor', 'preminor', 'prepatch', 'prerelease', 'from-git'];\n  }\n\n  exec(args, cb) {\n    return this.version(args).then(() => cb()).catch(cb);\n  }\n\n  async version(args) {\n    switch (args.length) {\n      case 0:\n        return this.list();\n\n      case 1:\n        return this.change(args);\n\n      default:\n        throw this.usage;\n    }\n  }\n\n  async change(args) {\n    const prefix = this.npm.config.get('tag-version-prefix');\n    const version = await libversion(args[0], { ...this.npm.flatOptions,\n      path: this.npm.prefix\n    });\n    return this.npm.output(`${prefix}${version}`);\n  }\n\n  async list() {\n    const results = {};\n\n    const {\n      promisify\n    } = require('util');\n\n    const {\n      resolve\n    } = require('path');\n\n    const readFile = promisify(require('fs').readFile);\n    const pj = resolve(this.npm.prefix, 'package.json');\n    const pkg = await readFile(pj, 'utf8').then(data => JSON.parse(data)).catch(() => ({}));\n    if (pkg.name && pkg.version) results[pkg.name] = pkg.version;\n    results.npm = this.npm.version;\n\n    for (const [key, version] of Object.entries(process.versions)) results[key] = version;\n\n    if (this.npm.config.get('json')) this.npm.output(JSON.stringify(results, null, 2));else this.npm.output(results);\n  }\n\n}\n\nmodule.exports = Version;","map":{"version":3,"sources":["/Users/kaelen/nsc-mds/node_modules/npm/lib/version.js"],"names":["libversion","require","BaseCommand","Version","description","name","usage","completion","opts","conf","argv","remain","length","exec","args","cb","version","then","catch","list","change","prefix","npm","config","get","flatOptions","path","output","results","promisify","resolve","readFile","pj","pkg","data","JSON","parse","key","Object","entries","process","versions","stringify","module","exports"],"mappings":"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","sourcesContent":["const libversion = require('libnpmversion')\n\nconst BaseCommand = require('./base-command.js')\nclass Version extends BaseCommand {\n  static get description () {\n    return 'Bump a package version'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'version'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease [--preid=<prerelease-id>] | from-git]']\n  }\n\n  async completion (opts) {\n    const { conf: { argv: { remain } } } = opts\n    if (remain.length > 2)\n      return []\n\n    return [\n      'major',\n      'minor',\n      'patch',\n      'premajor',\n      'preminor',\n      'prepatch',\n      'prerelease',\n      'from-git',\n    ]\n  }\n\n  exec (args, cb) {\n    return this.version(args).then(() => cb()).catch(cb)\n  }\n\n  async version (args) {\n    switch (args.length) {\n      case 0:\n        return this.list()\n      case 1:\n        return this.change(args)\n      default:\n        throw this.usage\n    }\n  }\n\n  async change (args) {\n    const prefix = this.npm.config.get('tag-version-prefix')\n    const version = await libversion(args[0], {\n      ...this.npm.flatOptions,\n      path: this.npm.prefix,\n    })\n    return this.npm.output(`${prefix}${version}`)\n  }\n\n  async list () {\n    const results = {}\n    const { promisify } = require('util')\n    const { resolve } = require('path')\n    const readFile = promisify(require('fs').readFile)\n    const pj = resolve(this.npm.prefix, 'package.json')\n\n    const pkg = await readFile(pj, 'utf8')\n      .then(data => JSON.parse(data))\n      .catch(() => ({}))\n\n    if (pkg.name && pkg.version)\n      results[pkg.name] = pkg.version\n\n    results.npm = this.npm.version\n    for (const [key, version] of Object.entries(process.versions))\n      results[key] = version\n\n    if (this.npm.config.get('json'))\n      this.npm.output(JSON.stringify(results, null, 2))\n    else\n      this.npm.output(results)\n  }\n}\nmodule.exports = Version\n"]},"metadata":{},"sourceType":"script"}