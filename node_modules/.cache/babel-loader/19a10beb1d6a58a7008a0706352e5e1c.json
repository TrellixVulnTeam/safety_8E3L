{"ast":null,"code":"// Base class for npm.commands[cmd]\nconst usageUtil = require('./utils/usage.js');\n\nconst ConfigDefinitions = require('./utils/config/definitions.js');\n\nclass BaseCommand {\n  constructor(npm) {\n    this.npm = npm;\n  }\n\n  get name() {\n    return this.constructor.name;\n  }\n\n  get description() {\n    return this.constructor.description;\n  }\n\n  get usage() {\n    let usage = `npm ${this.constructor.name}\\n\\n`;\n    if (this.constructor.description) usage = `${usage}${this.constructor.description}\\n\\n`;\n    usage = `${usage}Usage:\\n`;\n    if (!this.constructor.usage) usage = `${usage}npm ${this.constructor.name}`;else usage = `${usage}${this.constructor.usage.map(u => `npm ${this.constructor.name} ${u}`).join('\\n')}`;\n    if (this.constructor.params) // TODO word wrap this along params boundaries\n      usage = `${usage}\\n\\nOptions:\\n[${this.constructor.params.map(p => ConfigDefinitions[p].usage).join('] [')}]`; // Mostly this just appends aliases, this could be more clear\n\n    usage = usageUtil(this.constructor.name, usage);\n    usage = `${usage}\\n\\nRun \"npm help ${this.constructor.name}\" for more info`;\n    return usage;\n  }\n\n  usageError(msg) {\n    if (!msg) {\n      return Object.assign(new Error(`\\nUsage: ${this.usage}`), {\n        code: 'EUSAGE'\n      });\n    }\n\n    return Object.assign(new Error(`\\nUsage: ${msg}\\n\\n${this.usage}`), {\n      code: 'EUSAGE'\n    });\n  }\n\n  execWorkspaces(args, filters, cb) {\n    throw Object.assign(new Error('This command does not support workspaces.'), {\n      code: 'ENOWORKSPACES'\n    });\n  }\n\n}\n\nmodule.exports = BaseCommand;","map":{"version":3,"sources":["/Users/kaelen/nsc-mds/node_modules/npm/lib/base-command.js"],"names":["usageUtil","require","ConfigDefinitions","BaseCommand","constructor","npm","name","description","usage","map","u","join","params","p","usageError","msg","Object","assign","Error","code","execWorkspaces","args","filters","cb","module","exports"],"mappings":"AAAA;AACA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,+BAAD,CAAjC;;AAEA,MAAME,WAAN,CAAkB;AAChBC,EAAAA,WAAW,CAAEC,GAAF,EAAO;AAChB,SAAKA,GAAL,GAAWA,GAAX;AACD;;AAEO,MAAJC,IAAI,GAAI;AACV,WAAO,KAAKF,WAAL,CAAiBE,IAAxB;AACD;;AAEc,MAAXC,WAAW,GAAI;AACjB,WAAO,KAAKH,WAAL,CAAiBG,WAAxB;AACD;;AAEQ,MAALC,KAAK,GAAI;AACX,QAAIA,KAAK,GAAI,OAAM,KAAKJ,WAAL,CAAiBE,IAAK,MAAzC;AACA,QAAI,KAAKF,WAAL,CAAiBG,WAArB,EACEC,KAAK,GAAI,GAAEA,KAAM,GAAE,KAAKJ,WAAL,CAAiBG,WAAY,MAAhD;AAEFC,IAAAA,KAAK,GAAI,GAAEA,KAAM,UAAjB;AACA,QAAI,CAAC,KAAKJ,WAAL,CAAiBI,KAAtB,EACEA,KAAK,GAAI,GAAEA,KAAM,OAAM,KAAKJ,WAAL,CAAiBE,IAAK,EAA7C,CADF,KAGEE,KAAK,GAAI,GAAEA,KAAM,GAAE,KAAKJ,WAAL,CAAiBI,KAAjB,CAAuBC,GAAvB,CAA2BC,CAAC,IAAK,OAAM,KAAKN,WAAL,CAAiBE,IAAK,IAAGI,CAAE,EAAlE,EAAqEC,IAArE,CAA0E,IAA1E,CAAgF,EAAnG;AAEF,QAAI,KAAKP,WAAL,CAAiBQ,MAArB,EACE;AACAJ,MAAAA,KAAK,GAAI,GAAEA,KAAM,kBAAiB,KAAKJ,WAAL,CAAiBQ,MAAjB,CAAwBH,GAAxB,CAA4BI,CAAC,IAAIX,iBAAiB,CAACW,CAAD,CAAjB,CAAqBL,KAAtD,EAA6DG,IAA7D,CAAkE,KAAlE,CAAyE,GAA3G,CAbS,CAeX;;AACAH,IAAAA,KAAK,GAAGR,SAAS,CAAC,KAAKI,WAAL,CAAiBE,IAAlB,EAAwBE,KAAxB,CAAjB;AACAA,IAAAA,KAAK,GAAI,GAAEA,KAAM,qBAAoB,KAAKJ,WAAL,CAAiBE,IAAK,iBAA3D;AACA,WAAOE,KAAP;AACD;;AAEDM,EAAAA,UAAU,CAAEC,GAAF,EAAO;AACf,QAAI,CAACA,GAAL,EAAU;AACR,aAAOC,MAAM,CAACC,MAAP,CAAc,IAAIC,KAAJ,CAAW,YAAW,KAAKV,KAAM,EAAjC,CAAd,EAAmD;AACxDW,QAAAA,IAAI,EAAE;AADkD,OAAnD,CAAP;AAGD;;AAED,WAAOH,MAAM,CAACC,MAAP,CAAc,IAAIC,KAAJ,CAAW,YAAWH,GAAI,OAAM,KAAKP,KAAM,EAA3C,CAAd,EAA6D;AAClEW,MAAAA,IAAI,EAAE;AAD4D,KAA7D,CAAP;AAGD;;AAEDC,EAAAA,cAAc,CAAEC,IAAF,EAAQC,OAAR,EAAiBC,EAAjB,EAAqB;AACjC,UAAMP,MAAM,CAACC,MAAP,CACJ,IAAIC,KAAJ,CAAU,2CAAV,CADI,EAEJ;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAFI,CAAN;AAID;;AAnDe;;AAqDlBK,MAAM,CAACC,OAAP,GAAiBtB,WAAjB","sourcesContent":["// Base class for npm.commands[cmd]\nconst usageUtil = require('./utils/usage.js')\nconst ConfigDefinitions = require('./utils/config/definitions.js')\n\nclass BaseCommand {\n  constructor (npm) {\n    this.npm = npm\n  }\n\n  get name () {\n    return this.constructor.name\n  }\n\n  get description () {\n    return this.constructor.description\n  }\n\n  get usage () {\n    let usage = `npm ${this.constructor.name}\\n\\n`\n    if (this.constructor.description)\n      usage = `${usage}${this.constructor.description}\\n\\n`\n\n    usage = `${usage}Usage:\\n`\n    if (!this.constructor.usage)\n      usage = `${usage}npm ${this.constructor.name}`\n    else\n      usage = `${usage}${this.constructor.usage.map(u => `npm ${this.constructor.name} ${u}`).join('\\n')}`\n\n    if (this.constructor.params)\n      // TODO word wrap this along params boundaries\n      usage = `${usage}\\n\\nOptions:\\n[${this.constructor.params.map(p => ConfigDefinitions[p].usage).join('] [')}]`\n\n    // Mostly this just appends aliases, this could be more clear\n    usage = usageUtil(this.constructor.name, usage)\n    usage = `${usage}\\n\\nRun \"npm help ${this.constructor.name}\" for more info`\n    return usage\n  }\n\n  usageError (msg) {\n    if (!msg) {\n      return Object.assign(new Error(`\\nUsage: ${this.usage}`), {\n        code: 'EUSAGE',\n      })\n    }\n\n    return Object.assign(new Error(`\\nUsage: ${msg}\\n\\n${this.usage}`), {\n      code: 'EUSAGE',\n    })\n  }\n\n  execWorkspaces (args, filters, cb) {\n    throw Object.assign(\n      new Error('This command does not support workspaces.'),\n      { code: 'ENOWORKSPACES' }\n    )\n  }\n}\nmodule.exports = BaseCommand\n"]},"metadata":{},"sourceType":"script"}