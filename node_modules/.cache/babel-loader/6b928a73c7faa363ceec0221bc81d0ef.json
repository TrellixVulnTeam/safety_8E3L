{"ast":null,"code":"// The arborist manages three trees:\n// - actual\n// - virtual\n// - ideal\n//\n// The actual tree is what's present on disk in the node_modules tree\n// and elsewhere that links may extend.\n//\n// The virtual tree is loaded from metadata (package.json and lock files).\n//\n// The ideal tree is what we WANT that actual tree to become.  This starts\n// with the virtual tree, and then applies the options requesting\n// add/remove/update actions.\n//\n// To reify a tree, we calculate a diff between the ideal and actual trees,\n// and then turn the actual tree into the ideal tree by taking the actions\n// required.  At the end of the reification process, the actualTree is\n// updated to reflect the changes.\n//\n// Each tree has an Inventory at the root.  Shrinkwrap is tracked by Arborist\n// instance.  It always refers to the actual tree, but is updated (and written\n// to disk) on reification.\n// Each of the mixin \"classes\" adds functionality, but are not dependent on\n// constructor call order.  So, we just load them in an array, and build up\n// the base class, so that the overall voltron class is easier to test and\n// cover, and separation of concerns can be maintained.\nconst {\n  resolve\n} = require('path');\n\nconst {\n  homedir\n} = require('os');\n\nconst procLog = require('../proc-log.js');\n\nconst mixins = [require('../tracker.js'), require('./pruner.js'), require('./deduper.js'), require('./audit.js'), require('./build-ideal-tree.js'), require('./load-workspaces.js'), require('./load-actual.js'), require('./load-virtual.js'), require('./rebuild.js'), require('./reify.js')];\nconst Base = mixins.reduce((a, b) => b(a), require('events'));\n\nclass Arborist extends Base {\n  constructor(options = {}) {\n    process.emit('time', 'arborist:ctor');\n    super(options);\n    this.options = {\n      nodeVersion: process.version,\n      ...options,\n      path: options.path || '.',\n      cache: options.cache || `${homedir()}/.npm/_cacache`,\n      packumentCache: new Map(),\n      log: options.log || procLog\n    };\n    this.cache = resolve(this.options.cache);\n    this.path = resolve(this.options.path);\n    process.emit('timeEnd', 'arborist:ctor');\n  }\n\n}\n\nmodule.exports = Arborist;","map":{"version":3,"sources":["/Users/kaelen/nsc-mds/node_modules/npm/node_modules/@npmcli/arborist/lib/arborist/index.js"],"names":["resolve","require","homedir","procLog","mixins","Base","reduce","a","b","Arborist","constructor","options","process","emit","nodeVersion","version","path","cache","packumentCache","Map","log","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,MAAM;AAACA,EAAAA;AAAD,IAAYC,OAAO,CAAC,MAAD,CAAzB;;AACA,MAAM;AAACC,EAAAA;AAAD,IAAYD,OAAO,CAAC,IAAD,CAAzB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,gBAAD,CAAvB;;AAEA,MAAMG,MAAM,GAAG,CACbH,OAAO,CAAC,eAAD,CADM,EAEbA,OAAO,CAAC,aAAD,CAFM,EAGbA,OAAO,CAAC,cAAD,CAHM,EAIbA,OAAO,CAAC,YAAD,CAJM,EAKbA,OAAO,CAAC,uBAAD,CALM,EAMbA,OAAO,CAAC,sBAAD,CANM,EAObA,OAAO,CAAC,kBAAD,CAPM,EAQbA,OAAO,CAAC,mBAAD,CARM,EASbA,OAAO,CAAC,cAAD,CATM,EAUbA,OAAO,CAAC,YAAD,CAVM,CAAf;AAaA,MAAMI,IAAI,GAAGD,MAAM,CAACE,MAAP,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACD,CAAD,CAAzB,EAA8BN,OAAO,CAAC,QAAD,CAArC,CAAb;;AAEA,MAAMQ,QAAN,SAAuBJ,IAAvB,CAA4B;AAC1BK,EAAAA,WAAW,CAAEC,OAAO,GAAG,EAAZ,EAAgB;AACzBC,IAAAA,OAAO,CAACC,IAAR,CAAa,MAAb,EAAqB,eAArB;AACA,UAAMF,OAAN;AACA,SAAKA,OAAL,GAAe;AACbG,MAAAA,WAAW,EAAEF,OAAO,CAACG,OADR;AAEb,SAAGJ,OAFU;AAGbK,MAAAA,IAAI,EAAEL,OAAO,CAACK,IAAR,IAAgB,GAHT;AAIbC,MAAAA,KAAK,EAAEN,OAAO,CAACM,KAAR,IAAkB,GAAEf,OAAO,EAAG,gBAJxB;AAKbgB,MAAAA,cAAc,EAAE,IAAIC,GAAJ,EALH;AAMbC,MAAAA,GAAG,EAAET,OAAO,CAACS,GAAR,IAAejB;AANP,KAAf;AAQA,SAAKc,KAAL,GAAajB,OAAO,CAAC,KAAKW,OAAL,CAAaM,KAAd,CAApB;AACA,SAAKD,IAAL,GAAYhB,OAAO,CAAC,KAAKW,OAAL,CAAaK,IAAd,CAAnB;AACAJ,IAAAA,OAAO,CAACC,IAAR,CAAa,SAAb,EAAwB,eAAxB;AACD;;AAfyB;;AAkB5BQ,MAAM,CAACC,OAAP,GAAiBb,QAAjB","sourcesContent":["// The arborist manages three trees:\n// - actual\n// - virtual\n// - ideal\n//\n// The actual tree is what's present on disk in the node_modules tree\n// and elsewhere that links may extend.\n//\n// The virtual tree is loaded from metadata (package.json and lock files).\n//\n// The ideal tree is what we WANT that actual tree to become.  This starts\n// with the virtual tree, and then applies the options requesting\n// add/remove/update actions.\n//\n// To reify a tree, we calculate a diff between the ideal and actual trees,\n// and then turn the actual tree into the ideal tree by taking the actions\n// required.  At the end of the reification process, the actualTree is\n// updated to reflect the changes.\n//\n// Each tree has an Inventory at the root.  Shrinkwrap is tracked by Arborist\n// instance.  It always refers to the actual tree, but is updated (and written\n// to disk) on reification.\n\n// Each of the mixin \"classes\" adds functionality, but are not dependent on\n// constructor call order.  So, we just load them in an array, and build up\n// the base class, so that the overall voltron class is easier to test and\n// cover, and separation of concerns can be maintained.\n\nconst {resolve} = require('path')\nconst {homedir} = require('os')\nconst procLog = require('../proc-log.js')\n\nconst mixins = [\n  require('../tracker.js'),\n  require('./pruner.js'),\n  require('./deduper.js'),\n  require('./audit.js'),\n  require('./build-ideal-tree.js'),\n  require('./load-workspaces.js'),\n  require('./load-actual.js'),\n  require('./load-virtual.js'),\n  require('./rebuild.js'),\n  require('./reify.js'),\n]\n\nconst Base = mixins.reduce((a, b) => b(a), require('events'))\n\nclass Arborist extends Base {\n  constructor (options = {}) {\n    process.emit('time', 'arborist:ctor')\n    super(options)\n    this.options = {\n      nodeVersion: process.version,\n      ...options,\n      path: options.path || '.',\n      cache: options.cache || `${homedir()}/.npm/_cacache`,\n      packumentCache: new Map(),\n      log: options.log || procLog,\n    }\n    this.cache = resolve(this.options.cache)\n    this.path = resolve(this.options.path)\n    process.emit('timeEnd', 'arborist:ctor')\n  }\n}\n\nmodule.exports = Arborist\n"]},"metadata":{},"sourceType":"script"}