{"ast":null,"code":"// Separated out for easier unit testing\nmodule.exports = process => {\n  // set it here so that regardless of what happens later, we don't\n  // leak any private CLI configs to other programs\n  process.title = 'npm';\n\n  const {\n    checkForBrokenNode,\n    checkForUnsupportedNode\n  } = require('../lib/utils/unsupported.js');\n\n  checkForBrokenNode();\n\n  const log = require('npmlog'); // pause it here so it can unpause when we've loaded the configs\n  // and know what loglevel we should be printing.\n\n\n  log.pause();\n  checkForUnsupportedNode();\n\n  const npm = require('../lib/npm.js');\n\n  const errorHandler = require('../lib/utils/error-handler.js'); // if npm is called as \"npmg\" or \"npm_g\", then\n  // run in global mode.\n\n\n  if (process.argv[1][process.argv[1].length - 1] === 'g') process.argv.splice(1, 1, 'npm', '-g');\n  log.verbose('cli', process.argv);\n  log.info('using', 'npm@%s', npm.version);\n  log.info('using', 'node@%s', process.version);\n  process.on('uncaughtException', errorHandler);\n  process.on('unhandledRejection', errorHandler); // now actually fire up npm and run the command.\n  // this is how to use npm programmatically:\n\n  const updateNotifier = require('../lib/utils/update-notifier.js');\n\n  npm.load(async er => {\n    if (er) return errorHandler(er); // npm --version=cli\n\n    if (npm.config.get('version', 'cli')) {\n      npm.output(npm.version);\n      return errorHandler.exit(0);\n    } // npm --versions=cli\n\n\n    if (npm.config.get('versions', 'cli')) {\n      npm.argv = ['version'];\n      npm.config.set('usage', false, 'cli');\n    }\n\n    npm.updateNotification = await updateNotifier(npm);\n    const cmd = npm.argv.shift();\n    const impl = npm.commands[cmd];\n    if (impl) impl(npm.argv, errorHandler);else {\n      try {\n        if (cmd) {\n          const didYouMean = require('./utils/did-you-mean.js');\n\n          const suggestions = await didYouMean(npm, npm.localPrefix, cmd);\n          npm.output(`Unknown command: \"${cmd}\"${suggestions}\\n\\nTo see a list of supported npm commands, run:\\n  npm help`);\n        } else npm.output(npm.usage);\n\n        process.exitCode = 1;\n        return errorHandler();\n      } catch (err) {\n        errorHandler(err);\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/Users/kaelen/nsc-mds/node_modules/npm/lib/cli.js"],"names":["module","exports","process","title","checkForBrokenNode","checkForUnsupportedNode","require","log","pause","npm","errorHandler","argv","length","splice","verbose","info","version","on","updateNotifier","load","er","config","get","output","exit","set","updateNotification","cmd","shift","impl","commands","didYouMean","suggestions","localPrefix","usage","exitCode","err"],"mappings":"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","sourcesContent":["// Separated out for easier unit testing\nmodule.exports = (process) => {\n  // set it here so that regardless of what happens later, we don't\n  // leak any private CLI configs to other programs\n  process.title = 'npm'\n\n  const {\n    checkForBrokenNode,\n    checkForUnsupportedNode,\n  } = require('../lib/utils/unsupported.js')\n\n  checkForBrokenNode()\n\n  const log = require('npmlog')\n  // pause it here so it can unpause when we've loaded the configs\n  // and know what loglevel we should be printing.\n  log.pause()\n\n  checkForUnsupportedNode()\n\n  const npm = require('../lib/npm.js')\n  const errorHandler = require('../lib/utils/error-handler.js')\n\n  // if npm is called as \"npmg\" or \"npm_g\", then\n  // run in global mode.\n  if (process.argv[1][process.argv[1].length - 1] === 'g')\n    process.argv.splice(1, 1, 'npm', '-g')\n\n  log.verbose('cli', process.argv)\n\n  log.info('using', 'npm@%s', npm.version)\n  log.info('using', 'node@%s', process.version)\n\n  process.on('uncaughtException', errorHandler)\n  process.on('unhandledRejection', errorHandler)\n\n  // now actually fire up npm and run the command.\n  // this is how to use npm programmatically:\n  const updateNotifier = require('../lib/utils/update-notifier.js')\n  npm.load(async er => {\n    if (er)\n      return errorHandler(er)\n\n    // npm --version=cli\n    if (npm.config.get('version', 'cli')) {\n      npm.output(npm.version)\n      return errorHandler.exit(0)\n    }\n\n    // npm --versions=cli\n    if (npm.config.get('versions', 'cli')) {\n      npm.argv = ['version']\n      npm.config.set('usage', false, 'cli')\n    }\n\n    npm.updateNotification = await updateNotifier(npm)\n\n    const cmd = npm.argv.shift()\n    const impl = npm.commands[cmd]\n    if (impl)\n      impl(npm.argv, errorHandler)\n    else {\n      try {\n        if (cmd) {\n          const didYouMean = require('./utils/did-you-mean.js')\n          const suggestions = await didYouMean(npm, npm.localPrefix, cmd)\n          npm.output(`Unknown command: \"${cmd}\"${suggestions}\\n\\nTo see a list of supported npm commands, run:\\n  npm help`)\n        } else\n          npm.output(npm.usage)\n        process.exitCode = 1\n        return errorHandler()\n      } catch (err) {\n        errorHandler(err)\n      }\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}