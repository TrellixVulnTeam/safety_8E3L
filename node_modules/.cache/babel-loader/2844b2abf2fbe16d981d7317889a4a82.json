{"ast":null,"code":"let cbCalled = false;\n\nconst log = require('npmlog');\n\nconst npm = require('../npm.js');\n\nlet itWorked = false;\n\nconst path = require('path');\n\nlet wroteLogFile = false;\nlet exitCode = 0;\n\nconst errorMessage = require('./error-message.js');\n\nconst replaceInfo = require('./replace-info.js');\n\nconst cacheFile = require('./cache-file.js');\n\nlet logFileName;\n\nconst getLogFile = () => {\n  if (!logFileName) logFileName = path.resolve(npm.config.get('cache'), '_logs', new Date().toISOString().replace(/[.:]/g, '_') + '-debug.log');\n  return logFileName;\n};\n\nconst timings = {\n  version: npm.version,\n  command: process.argv.slice(2),\n  logfile: null\n};\nprocess.on('timing', (name, value) => {\n  if (timings[name]) timings[name] += value;else timings[name] = value;\n});\nprocess.on('exit', code => {\n  process.emit('timeEnd', 'npm');\n  log.disableProgress();\n\n  if (npm.config && npm.config.loaded && npm.config.get('timing')) {\n    try {\n      timings.logfile = getLogFile();\n      cacheFile.append('_timing.json', JSON.stringify(timings) + '\\n');\n    } catch (_) {// ignore\n    }\n  }\n\n  if (code) itWorked = false;\n  if (itWorked) log.info('ok');else {\n    if (!cbCalled) {\n      log.error('', 'cb() never called!');\n      console.error('');\n      log.error('', 'This is an error with npm itself. Please report this error at:');\n      log.error('', '    <https://github.com/npm/cli/issues>');\n      writeLogFile();\n    }\n\n    if (code) log.verbose('code', code);\n  }\n  if (npm.config && npm.config.loaded && npm.config.get('timing') && !wroteLogFile) writeLogFile();\n\n  if (wroteLogFile) {\n    // just a line break\n    if (log.levels[log.level] <= log.levels.error) console.error('');\n    log.error('', ['A complete log of this run can be found in:', '    ' + getLogFile()].join('\\n'));\n    wroteLogFile = false;\n  } // actually exit.\n\n\n  if (exitCode === 0 && !itWorked) exitCode = 1;\n  if (exitCode !== 0) process.exit(exitCode);\n});\n\nconst exit = (code, noLog) => {\n  exitCode = exitCode || process.exitCode || code;\n  log.verbose('exit', code);\n  if (log.level === 'silent') noLog = true;\n\n  const reallyExit = () => {\n    itWorked = !code; // Exit directly -- nothing in the CLI should still be running in the\n    // background at this point, and this makes sure anything left dangling\n    // for whatever reason gets thrown away, instead of leaving the CLI open\n    //\n    // Commands that expect long-running actions should just delay `cb()`\n\n    process.stdout.write('', () => {\n      process.exit(code);\n    });\n  };\n\n  if (code && !noLog) writeLogFile();\n  reallyExit();\n};\n\nconst errorHandler = er => {\n  log.disableProgress();\n\n  if (!npm.config || !npm.config.loaded) {\n    // logging won't work unless we pretend that it's ready\n    er = er || new Error('Exit prior to config file resolving.');\n    console.error(er.stack || er.message);\n  }\n\n  if (cbCalled) er = er || new Error('Callback called more than once.');\n\n  if (npm.updateNotification) {\n    const {\n      level\n    } = log;\n    log.level = log.levels.notice;\n    log.notice('', npm.updateNotification);\n    log.level = level;\n  }\n\n  cbCalled = true;\n  if (!er) return exit(0); // if we got a command that just shells out to something else, then it\n  // will presumably print its own errors and exit with a proper status\n  // code if there's a problem.  If we got an error with a code=0, then...\n  // something else went wrong along the way, so maybe an npm problem?\n\n  const isShellout = npm.shelloutCommands.includes(npm.command);\n  const quietShellout = isShellout && typeof er.code === 'number' && er.code;\n  if (quietShellout) return exit(er.code, true);else if (typeof er === 'string') {\n    log.error('', er);\n    return exit(1, true);\n  } else if (!(er instanceof Error)) {\n    log.error('weird error', er);\n    return exit(1, true);\n  }\n\n  if (!er.code) {\n    const matchErrorCode = er.message.match(/^(?:Error: )?(E[A-Z]+)/);\n    er.code = matchErrorCode && matchErrorCode[1];\n  }\n\n  for (const k of ['type', 'stack', 'statusCode', 'pkgid']) {\n    const v = er[k];\n    if (v) log.verbose(k, replaceInfo(v));\n  }\n\n  log.verbose('cwd', process.cwd());\n\n  const os = require('os');\n\n  const args = replaceInfo(process.argv);\n  log.verbose('', os.type() + ' ' + os.release());\n  log.verbose('argv', args.map(JSON.stringify).join(' '));\n  log.verbose('node', process.version);\n  log.verbose('npm ', 'v' + npm.version);\n\n  for (const k of ['code', 'syscall', 'file', 'path', 'dest', 'errno']) {\n    const v = er[k];\n    if (v) log.error(k, v);\n  }\n\n  const msg = errorMessage(er);\n\n  for (const errline of [...msg.summary, ...msg.detail]) log.error(...errline);\n\n  if (npm.config && npm.config.get('json')) {\n    const error = {\n      error: {\n        code: er.code,\n        summary: messageText(msg.summary),\n        detail: messageText(msg.detail)\n      }\n    };\n    console.error(JSON.stringify(error, null, 2));\n  }\n\n  exit(typeof er.errno === 'number' ? er.errno : typeof er.code === 'number' ? er.code : 1);\n};\n\nconst messageText = msg => msg.map(line => line.slice(1).join(' ')).join('\\n');\n\nconst writeLogFile = () => {\n  if (wroteLogFile) return;\n\n  const os = require('os');\n\n  try {\n    let logOutput = '';\n    log.record.forEach(m => {\n      const p = [m.id, m.level];\n      if (m.prefix) p.push(m.prefix);\n      const pref = p.join(' ');\n      m.message.trim().split(/\\r?\\n/).map(line => (pref + ' ' + line).trim()).forEach(line => {\n        logOutput += line + os.EOL;\n      });\n    });\n    cacheFile.write(getLogFile(), logOutput); // truncate once it's been written.\n\n    log.record.length = 0;\n    wroteLogFile = true;\n  } catch (ex) {}\n};\n\nmodule.exports = errorHandler;\nmodule.exports.exit = exit;","map":{"version":3,"sources":["/Users/kaelen/nsc-mds/node_modules/npm/lib/utils/error-handler.js"],"names":["cbCalled","log","require","npm","itWorked","path","wroteLogFile","exitCode","errorMessage","replaceInfo","cacheFile","logFileName","getLogFile","resolve","config","get","Date","toISOString","replace","timings","version","command","process","argv","slice","logfile","on","name","value","code","emit","disableProgress","loaded","append","JSON","stringify","_","info","error","console","writeLogFile","verbose","levels","level","join","exit","noLog","reallyExit","stdout","write","errorHandler","er","Error","stack","message","updateNotification","notice","isShellout","shelloutCommands","includes","quietShellout","matchErrorCode","match","k","v","cwd","os","args","type","release","map","msg","errline","summary","detail","messageText","errno","line","logOutput","record","forEach","m","p","id","prefix","push","pref","trim","split","EOL","length","ex","module","exports"],"mappings":"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","sourcesContent":["let cbCalled = false\nconst log = require('npmlog')\nconst npm = require('../npm.js')\nlet itWorked = false\nconst path = require('path')\nlet wroteLogFile = false\nlet exitCode = 0\nconst errorMessage = require('./error-message.js')\nconst replaceInfo = require('./replace-info.js')\n\nconst cacheFile = require('./cache-file.js')\n\nlet logFileName\nconst getLogFile = () => {\n  if (!logFileName)\n    logFileName = path.resolve(npm.config.get('cache'), '_logs', (new Date()).toISOString().replace(/[.:]/g, '_') + '-debug.log')\n\n  return logFileName\n}\n\nconst timings = {\n  version: npm.version,\n  command: process.argv.slice(2),\n  logfile: null,\n}\nprocess.on('timing', (name, value) => {\n  if (timings[name])\n    timings[name] += value\n  else\n    timings[name] = value\n})\n\nprocess.on('exit', code => {\n  process.emit('timeEnd', 'npm')\n  log.disableProgress()\n  if (npm.config && npm.config.loaded && npm.config.get('timing')) {\n    try {\n      timings.logfile = getLogFile()\n      cacheFile.append('_timing.json', JSON.stringify(timings) + '\\n')\n    } catch (_) {\n      // ignore\n    }\n  }\n\n  if (code)\n    itWorked = false\n  if (itWorked)\n    log.info('ok')\n  else {\n    if (!cbCalled) {\n      log.error('', 'cb() never called!')\n      console.error('')\n      log.error('', 'This is an error with npm itself. Please report this error at:')\n      log.error('', '    <https://github.com/npm/cli/issues>')\n      writeLogFile()\n    }\n\n    if (code)\n      log.verbose('code', code)\n  }\n  if (npm.config && npm.config.loaded && npm.config.get('timing') && !wroteLogFile)\n    writeLogFile()\n  if (wroteLogFile) {\n    // just a line break\n    if (log.levels[log.level] <= log.levels.error)\n      console.error('')\n\n    log.error(\n      '',\n      [\n        'A complete log of this run can be found in:',\n        '    ' + getLogFile(),\n      ].join('\\n')\n    )\n    wroteLogFile = false\n  }\n\n  // actually exit.\n  if (exitCode === 0 && !itWorked)\n    exitCode = 1\n\n  if (exitCode !== 0)\n    process.exit(exitCode)\n})\n\nconst exit = (code, noLog) => {\n  exitCode = exitCode || process.exitCode || code\n\n  log.verbose('exit', code)\n  if (log.level === 'silent')\n    noLog = true\n\n  const reallyExit = () => {\n    itWorked = !code\n\n    // Exit directly -- nothing in the CLI should still be running in the\n    // background at this point, and this makes sure anything left dangling\n    // for whatever reason gets thrown away, instead of leaving the CLI open\n    //\n    // Commands that expect long-running actions should just delay `cb()`\n    process.stdout.write('', () => {\n      process.exit(code)\n    })\n  }\n\n  if (code && !noLog)\n    writeLogFile()\n  reallyExit()\n}\n\nconst errorHandler = (er) => {\n  log.disableProgress()\n  if (!npm.config || !npm.config.loaded) {\n    // logging won't work unless we pretend that it's ready\n    er = er || new Error('Exit prior to config file resolving.')\n    console.error(er.stack || er.message)\n  }\n\n  if (cbCalled)\n    er = er || new Error('Callback called more than once.')\n\n  if (npm.updateNotification) {\n    const { level } = log\n    log.level = log.levels.notice\n    log.notice('', npm.updateNotification)\n    log.level = level\n  }\n\n  cbCalled = true\n  if (!er)\n    return exit(0)\n\n  // if we got a command that just shells out to something else, then it\n  // will presumably print its own errors and exit with a proper status\n  // code if there's a problem.  If we got an error with a code=0, then...\n  // something else went wrong along the way, so maybe an npm problem?\n  const isShellout = npm.shelloutCommands.includes(npm.command)\n  const quietShellout = isShellout && typeof er.code === 'number' && er.code\n  if (quietShellout)\n    return exit(er.code, true)\n  else if (typeof er === 'string') {\n    log.error('', er)\n    return exit(1, true)\n  } else if (!(er instanceof Error)) {\n    log.error('weird error', er)\n    return exit(1, true)\n  }\n\n  if (!er.code) {\n    const matchErrorCode = er.message.match(/^(?:Error: )?(E[A-Z]+)/)\n    er.code = matchErrorCode && matchErrorCode[1]\n  }\n\n  for (const k of ['type', 'stack', 'statusCode', 'pkgid']) {\n    const v = er[k]\n    if (v)\n      log.verbose(k, replaceInfo(v))\n  }\n\n  log.verbose('cwd', process.cwd())\n\n  const os = require('os')\n  const args = replaceInfo(process.argv)\n  log.verbose('', os.type() + ' ' + os.release())\n  log.verbose('argv', args.map(JSON.stringify).join(' '))\n  log.verbose('node', process.version)\n  log.verbose('npm ', 'v' + npm.version)\n\n  for (const k of ['code', 'syscall', 'file', 'path', 'dest', 'errno']) {\n    const v = er[k]\n    if (v)\n      log.error(k, v)\n  }\n\n  const msg = errorMessage(er)\n  for (const errline of [...msg.summary, ...msg.detail])\n    log.error(...errline)\n\n  if (npm.config && npm.config.get('json')) {\n    const error = {\n      error: {\n        code: er.code,\n        summary: messageText(msg.summary),\n        detail: messageText(msg.detail),\n      },\n    }\n    console.error(JSON.stringify(error, null, 2))\n  }\n\n  exit(typeof er.errno === 'number' ? er.errno : typeof er.code === 'number' ? er.code : 1)\n}\n\nconst messageText = msg => msg.map(line => line.slice(1).join(' ')).join('\\n')\n\nconst writeLogFile = () => {\n  if (wroteLogFile)\n    return\n\n  const os = require('os')\n\n  try {\n    let logOutput = ''\n    log.record.forEach(m => {\n      const p = [m.id, m.level]\n      if (m.prefix)\n        p.push(m.prefix)\n      const pref = p.join(' ')\n\n      m.message.trim().split(/\\r?\\n/)\n        .map(line => (pref + ' ' + line).trim())\n        .forEach(line => {\n          logOutput += line + os.EOL\n        })\n    })\n    cacheFile.write(getLogFile(), logOutput)\n\n    // truncate once it's been written.\n    log.record.length = 0\n    wroteLogFile = true\n  } catch (ex) {\n\n  }\n}\n\nmodule.exports = errorHandler\nmodule.exports.exit = exit\n"]},"metadata":{},"sourceType":"script"}