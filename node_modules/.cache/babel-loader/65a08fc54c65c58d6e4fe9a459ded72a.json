{"ast":null,"code":"// print a banner telling the user to upgrade npm to latest\n// but not in CI, and not if we're doing that already.\n// Check daily for betas, and weekly otherwise.\nconst pacote = require('pacote');\n\nconst ciDetect = require('@npmcli/ci-detect');\n\nconst semver = require('semver');\n\nconst chalk = require('chalk');\n\nconst {\n  promisify\n} = require('util');\n\nconst stat = promisify(require('fs').stat);\nconst writeFile = promisify(require('fs').writeFile);\n\nconst {\n  resolve\n} = require('path');\n\nconst isGlobalNpmUpdate = npm => {\n  return npm.flatOptions.global && ['install', 'update'].includes(npm.command) && npm.argv.includes('npm');\n}; // update check frequency\n\n\nconst DAILY = 1000 * 60 * 60 * 24;\nconst WEEKLY = DAILY * 7;\n\nconst updateTimeout = async (npm, duration) => {\n  const t = new Date(Date.now() - duration); // don't put it in the _cacache folder, just in npm's cache\n\n  const f = resolve(npm.flatOptions.cache, '../_update-notifier-last-checked'); // if we don't have a file, then definitely check it.\n\n  const st = await stat(f).catch(() => ({\n    mtime: t - 1\n  }));\n\n  if (t > st.mtime) {\n    // best effort, if this fails, it's ok.\n    // might be using /dev/null as the cache or something weird like that.\n    await writeFile(f, '').catch(() => {});\n    return true;\n  } else return false;\n};\n\nconst updateNotifier = module.exports = async (npm, spec = 'latest') => {\n  // never check for updates in CI, when updating npm already, or opted out\n  if (!npm.config.get('update-notifier') || isGlobalNpmUpdate(npm) || ciDetect()) return null; // if we're on a prerelease train, then updates are coming fast\n  // check for a new one daily.  otherwise, weekly.\n\n  const {\n    version\n  } = npm;\n  const current = semver.parse(version); // if we're on a beta train, always get the next beta\n\n  if (current.prerelease.length) spec = `^${version}`; // while on a beta train, get updates daily\n\n  const duration = spec !== 'latest' ? DAILY : WEEKLY; // if we've already checked within the specified duration, don't check again\n\n  if (!(await updateTimeout(npm, duration))) return null; // if they're currently using a prerelease, nudge to the next prerelease\n  // otherwise, nudge to latest.\n\n  const useColor = npm.log.useColor();\n  const mani = await pacote.manifest(`npm@${spec}`, {\n    // always prefer latest, even if doing --tag=whatever on the cmd\n    defaultTag: 'latest',\n    ...npm.flatOptions\n  }).catch(() => null); // if pacote failed, give up\n\n  if (!mani) return null;\n  const latest = mani.version; // if the current version is *greater* than latest, we're on a 'next'\n  // and should get the updates from that release train.\n  // Note that this isn't another http request over the network, because\n  // the packument will be cached by pacote from previous request.\n\n  if (semver.gt(version, latest) && spec === 'latest') return updateNotifier(npm, `^${version}`); // if we already have something >= the desired spec, then we're done\n\n  if (semver.gte(version, latest)) return null; // ok!  notify the user about this update they should get.\n  // The message is saved for printing at process exit so it will not get\n  // lost in any other messages being printed as part of the command.\n\n  const update = semver.parse(mani.version);\n  const type = update.major !== current.major ? 'major' : update.minor !== current.minor ? 'minor' : update.patch !== current.patch ? 'patch' : 'prerelease';\n  const typec = !useColor ? type : type === 'major' ? chalk.red(type) : type === 'minor' ? chalk.yellow(type) : chalk.green(type);\n  const oldc = !useColor ? current : chalk.red(current);\n  const latestc = !useColor ? latest : chalk.green(latest);\n  const changelog = `https://github.com/npm/cli/releases/tag/v${latest}`;\n  const changelogc = !useColor ? `<${changelog}>` : chalk.cyan(changelog);\n  const cmd = `npm install -g npm@${latest}`;\n  const cmdc = !useColor ? `\\`${cmd}\\`` : chalk.green(cmd);\n  const message = `\\nNew ${typec} version of npm available! ` + `${oldc} -> ${latestc}\\n` + `Changelog: ${changelogc}\\n` + `Run ${cmdc} to update!\\n`;\n  const messagec = !useColor ? message : chalk.bgBlack.white(message);\n  return messagec;\n};","map":{"version":3,"sources":["/Users/kaelen/nsc-mds/node_modules/npm/lib/utils/update-notifier.js"],"names":["pacote","require","ciDetect","semver","chalk","promisify","stat","writeFile","resolve","isGlobalNpmUpdate","npm","flatOptions","global","includes","command","argv","DAILY","WEEKLY","updateTimeout","duration","t","Date","now","f","cache","st","catch","mtime","updateNotifier","module","exports","spec","config","get","version","current","parse","prerelease","length","useColor","log","mani","manifest","defaultTag","latest","gt","gte","update","type","major","minor","patch","typec","red","yellow","green","oldc","latestc","changelog","changelogc","cyan","cmd","cmdc","message","messagec","bgBlack","white"],"mappings":"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","sourcesContent":["// print a banner telling the user to upgrade npm to latest\n// but not in CI, and not if we're doing that already.\n// Check daily for betas, and weekly otherwise.\n\nconst pacote = require('pacote')\nconst ciDetect = require('@npmcli/ci-detect')\nconst semver = require('semver')\nconst chalk = require('chalk')\nconst { promisify } = require('util')\nconst stat = promisify(require('fs').stat)\nconst writeFile = promisify(require('fs').writeFile)\nconst { resolve } = require('path')\n\nconst isGlobalNpmUpdate = npm => {\n  return npm.flatOptions.global &&\n    ['install', 'update'].includes(npm.command) &&\n    npm.argv.includes('npm')\n}\n\n// update check frequency\nconst DAILY = 1000 * 60 * 60 * 24\nconst WEEKLY = DAILY * 7\n\nconst updateTimeout = async (npm, duration) => {\n  const t = new Date(Date.now() - duration)\n  // don't put it in the _cacache folder, just in npm's cache\n  const f = resolve(npm.flatOptions.cache, '../_update-notifier-last-checked')\n  // if we don't have a file, then definitely check it.\n  const st = await stat(f).catch(() => ({ mtime: t - 1 }))\n\n  if (t > st.mtime) {\n    // best effort, if this fails, it's ok.\n    // might be using /dev/null as the cache or something weird like that.\n    await writeFile(f, '').catch(() => {})\n    return true\n  } else\n    return false\n}\n\nconst updateNotifier = module.exports = async (npm, spec = 'latest') => {\n  // never check for updates in CI, when updating npm already, or opted out\n  if (!npm.config.get('update-notifier') ||\n      isGlobalNpmUpdate(npm) ||\n      ciDetect())\n    return null\n\n  // if we're on a prerelease train, then updates are coming fast\n  // check for a new one daily.  otherwise, weekly.\n  const { version } = npm\n  const current = semver.parse(version)\n\n  // if we're on a beta train, always get the next beta\n  if (current.prerelease.length)\n    spec = `^${version}`\n\n  // while on a beta train, get updates daily\n  const duration = spec !== 'latest' ? DAILY : WEEKLY\n\n  // if we've already checked within the specified duration, don't check again\n  if (!(await updateTimeout(npm, duration)))\n    return null\n\n  // if they're currently using a prerelease, nudge to the next prerelease\n  // otherwise, nudge to latest.\n  const useColor = npm.log.useColor()\n\n  const mani = await pacote.manifest(`npm@${spec}`, {\n    // always prefer latest, even if doing --tag=whatever on the cmd\n    defaultTag: 'latest',\n    ...npm.flatOptions,\n  }).catch(() => null)\n\n  // if pacote failed, give up\n  if (!mani)\n    return null\n\n  const latest = mani.version\n\n  // if the current version is *greater* than latest, we're on a 'next'\n  // and should get the updates from that release train.\n  // Note that this isn't another http request over the network, because\n  // the packument will be cached by pacote from previous request.\n  if (semver.gt(version, latest) && spec === 'latest')\n    return updateNotifier(npm, `^${version}`)\n\n  // if we already have something >= the desired spec, then we're done\n  if (semver.gte(version, latest))\n    return null\n\n  // ok!  notify the user about this update they should get.\n  // The message is saved for printing at process exit so it will not get\n  // lost in any other messages being printed as part of the command.\n  const update = semver.parse(mani.version)\n  const type = update.major !== current.major ? 'major'\n    : update.minor !== current.minor ? 'minor'\n    : update.patch !== current.patch ? 'patch'\n    : 'prerelease'\n  const typec = !useColor ? type\n    : type === 'major' ? chalk.red(type)\n    : type === 'minor' ? chalk.yellow(type)\n    : chalk.green(type)\n  const oldc = !useColor ? current : chalk.red(current)\n  const latestc = !useColor ? latest : chalk.green(latest)\n  const changelog = `https://github.com/npm/cli/releases/tag/v${latest}`\n  const changelogc = !useColor ? `<${changelog}>` : chalk.cyan(changelog)\n  const cmd = `npm install -g npm@${latest}`\n  const cmdc = !useColor ? `\\`${cmd}\\`` : chalk.green(cmd)\n  const message = `\\nNew ${typec} version of npm available! ` +\n    `${oldc} -> ${latestc}\\n` +\n    `Changelog: ${changelogc}\\n` +\n    `Run ${cmdc} to update!\\n`\n  const messagec = !useColor ? message : chalk.bgBlack.white(message)\n\n  return messagec\n}\n"]},"metadata":{},"sourceType":"script"}