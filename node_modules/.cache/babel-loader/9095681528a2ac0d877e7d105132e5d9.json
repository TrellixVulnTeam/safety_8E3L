{"ast":null,"code":"const initJson = require('init-package-json');\n\nconst npa = require('npm-package-arg');\n\nconst BaseCommand = require('./base-command.js');\n\nclass Init extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Create a package.json file';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'init';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['[--force|-f|--yes|-y|--scope]', '<@scope> (same as `npx <@scope>/create`)', '[<@scope>/]<name> (same as `npx [<@scope>/]create-<name>`)'];\n  }\n\n  exec(args, cb) {\n    this.init(args).then(() => cb()).catch(cb);\n  }\n\n  async init(args) {\n    // the new npx style way\n    if (args.length) {\n      const initerName = args[0];\n      let packageName = initerName;\n      if (/^@[^/]+$/.test(initerName)) packageName = initerName + '/create';else {\n        const req = npa(initerName);\n\n        if (req.type === 'git' && req.hosted) {\n          const {\n            user,\n            project\n          } = req.hosted;\n          packageName = initerName.replace(user + '/' + project, user + '/create-' + project);\n        } else if (req.registry) {\n          packageName = req.name.replace(/^(@[^/]+\\/)?/, '$1create-');\n          if (req.rawSpec) packageName += '@' + req.rawSpec;\n        } else {\n          throw Object.assign(new Error('Unrecognized initializer: ' + initerName + '\\nFor more package binary executing power check out `npx`:' + '\\nhttps://www.npmjs.com/package/npx'), {\n            code: 'EUNSUPPORTED'\n          });\n        }\n      }\n      this.npm.config.set('package', []);\n      const newArgs = [packageName, ...args.slice(1)];\n      return new Promise((res, rej) => {\n        this.npm.commands.exec(newArgs, er => er ? rej(er) : res());\n      });\n    } // the old way\n\n\n    const dir = process.cwd();\n    this.npm.log.pause();\n    this.npm.log.disableProgress();\n    const initFile = this.npm.config.get('init-module');\n\n    if (!this.npm.config.get('yes') && !this.npm.config.get('force')) {\n      this.npm.output(['This utility will walk you through creating a package.json file.', 'It only covers the most common items, and tries to guess sensible defaults.', '', 'See `npm help init` for definitive documentation on these fields', 'and exactly what they do.', '', 'Use `npm install <pkg>` afterwards to install a package and', 'save it as a dependency in the package.json file.', '', 'Press ^C at any time to quit.'].join('\\n'));\n    } // XXX promisify init-package-json\n\n\n    await new Promise((res, rej) => {\n      initJson(dir, initFile, this.npm.config, (er, data) => {\n        this.npm.log.resume();\n        this.npm.log.enableProgress();\n        this.npm.log.silly('package data', data);\n\n        if (er && er.message === 'canceled') {\n          this.npm.log.warn('init', 'canceled');\n          return res();\n        }\n\n        if (er) rej(er);else {\n          this.npm.log.info('init', 'written successfully');\n          res(data);\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = Init;","map":{"version":3,"sources":["/Users/kaelen/nsc-mds/node_modules/npm/lib/init.js"],"names":["initJson","require","npa","BaseCommand","Init","description","name","usage","exec","args","cb","init","then","catch","length","initerName","packageName","test","req","type","hosted","user","project","replace","registry","rawSpec","Object","assign","Error","code","npm","config","set","newArgs","slice","Promise","res","rej","commands","er","dir","process","cwd","log","pause","disableProgress","initFile","get","output","join","data","resume","enableProgress","silly","message","warn","info","module","exports"],"mappings":"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","sourcesContent":["const initJson = require('init-package-json')\nconst npa = require('npm-package-arg')\n\nconst BaseCommand = require('./base-command.js')\n\nclass Init extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Create a package.json file'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'init'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return [\n      '[--force|-f|--yes|-y|--scope]',\n      '<@scope> (same as `npx <@scope>/create`)',\n      '[<@scope>/]<name> (same as `npx [<@scope>/]create-<name>`)',\n    ]\n  }\n\n  exec (args, cb) {\n    this.init(args).then(() => cb()).catch(cb)\n  }\n\n  async init (args) {\n    // the new npx style way\n    if (args.length) {\n      const initerName = args[0]\n      let packageName = initerName\n      if (/^@[^/]+$/.test(initerName))\n        packageName = initerName + '/create'\n      else {\n        const req = npa(initerName)\n        if (req.type === 'git' && req.hosted) {\n          const { user, project } = req.hosted\n          packageName = initerName\n            .replace(user + '/' + project, user + '/create-' + project)\n        } else if (req.registry) {\n          packageName = req.name.replace(/^(@[^/]+\\/)?/, '$1create-')\n          if (req.rawSpec)\n            packageName += '@' + req.rawSpec\n        } else {\n          throw Object.assign(new Error(\n            'Unrecognized initializer: ' + initerName +\n            '\\nFor more package binary executing power check out `npx`:' +\n            '\\nhttps://www.npmjs.com/package/npx'\n          ), { code: 'EUNSUPPORTED' })\n        }\n      }\n      this.npm.config.set('package', [])\n      const newArgs = [packageName, ...args.slice(1)]\n      return new Promise((res, rej) => {\n        this.npm.commands.exec(newArgs, er => er ? rej(er) : res())\n      })\n    }\n\n    // the old way\n    const dir = process.cwd()\n    this.npm.log.pause()\n    this.npm.log.disableProgress()\n    const initFile = this.npm.config.get('init-module')\n    if (!this.npm.config.get('yes') && !this.npm.config.get('force')) {\n      this.npm.output([\n        'This utility will walk you through creating a package.json file.',\n        'It only covers the most common items, and tries to guess sensible defaults.',\n        '',\n        'See `npm help init` for definitive documentation on these fields',\n        'and exactly what they do.',\n        '',\n        'Use `npm install <pkg>` afterwards to install a package and',\n        'save it as a dependency in the package.json file.',\n        '',\n        'Press ^C at any time to quit.',\n      ].join('\\n'))\n    }\n    // XXX promisify init-package-json\n    await new Promise((res, rej) => {\n      initJson(dir, initFile, this.npm.config, (er, data) => {\n        this.npm.log.resume()\n        this.npm.log.enableProgress()\n        this.npm.log.silly('package data', data)\n        if (er && er.message === 'canceled') {\n          this.npm.log.warn('init', 'canceled')\n          return res()\n        }\n        if (er)\n          rej(er)\n        else {\n          this.npm.log.info('init', 'written successfully')\n          res(data)\n        }\n      })\n    })\n  }\n}\nmodule.exports = Init\n"]},"metadata":{},"sourceType":"script"}