{"ast":null,"code":"const log = require('npmlog');\n\nconst fs = require('fs');\n\nconst parseJSON = require('json-parse-even-better-errors');\n\nconst rpj = require('read-package-json-fast');\n\nconst {\n  resolve\n} = require('path');\n\nconst getWorkspaces = require('./workspaces/get-workspaces.js');\n\nconst BaseCommand = require('./base-command.js');\n\nclass SetScript extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Set tasks in the scripts section of package.json';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['workspace', 'workspaces'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'set-script';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['[<script>] [<command>]'];\n  }\n\n  async completion(opts) {\n    const argv = opts.conf.argv.remain;\n\n    if (argv.length === 2) {\n      // find the script name\n      const json = resolve(this.npm.localPrefix, 'package.json');\n      const {\n        scripts = {}\n      } = await rpj(json).catch(er => ({}));\n      return Object.keys(scripts);\n    }\n  }\n\n  validate(args) {\n    if (process.env.npm_lifecycle_event === 'postinstall') throw new Error('Scripts can’t set from the postinstall script'); // Parse arguments\n\n    if (args.length !== 2) throw new Error(`Expected 2 arguments: got ${args.length}`);\n  }\n\n  exec(args, cb) {\n    this.set(args).then(() => cb()).catch(cb);\n  }\n\n  async set(args) {\n    this.validate(args);\n    const warn = this.setScript(this.npm.localPrefix, args[0], args[1]);\n    if (warn) log.warn('set-script', `Script \"${args[0]}\" was overwritten`);\n  }\n\n  execWorkspaces(args, filters, cb) {\n    this.setWorkspaces(args, filters).then(() => cb()).catch(cb);\n  }\n\n  async setWorkspaces(args, filters) {\n    this.validate(args);\n    const workspaces = await getWorkspaces(filters, {\n      path: this.npm.localPrefix\n    });\n\n    for (const [name, path] of workspaces) {\n      try {\n        const warn = this.setScript(path, args[0], args[1]);\n\n        if (warn) {\n          log.warn('set-script', `Script \"${args[0]}\" was overwritten`);\n          log.warn(`  in workspace: ${name}`);\n          log.warn(`  at location: ${path}`);\n        }\n      } catch (err) {\n        log.error('set-script', err.message);\n        log.error(`  in workspace: ${name}`);\n        log.error(`  at location: ${path}`);\n        process.exitCode = 1;\n      }\n    }\n  } // returns a Boolean that will be true if\n  // the requested script was overwritten\n  // and false if it was set as a new script\n\n\n  setScript(path, name, value) {\n    // Set the script\n    let manifest;\n    let warn = false;\n\n    try {\n      manifest = fs.readFileSync(resolve(path, 'package.json'), 'utf-8');\n    } catch (error) {\n      throw new Error('package.json not found');\n    }\n\n    try {\n      manifest = parseJSON(manifest);\n    } catch (error) {\n      throw new Error(`Invalid package.json: ${error}`);\n    }\n\n    if (!manifest.scripts) manifest.scripts = {};\n    if (manifest.scripts[name] && manifest.scripts[name] !== value) warn = true;\n    manifest.scripts[name] = value; // format content\n\n    const {\n      [Symbol.for('indent')]: indent,\n      [Symbol.for('newline')]: newline\n    } = manifest;\n    const content = (JSON.stringify(manifest, null, indent) + '\\n').replace(/\\n/g, newline);\n    fs.writeFileSync(resolve(path, 'package.json'), content);\n    return warn;\n  }\n\n}\n\nmodule.exports = SetScript;","map":{"version":3,"sources":["/Users/kaelen/nsc-mds/node_modules/npm/lib/set-script.js"],"names":["log","require","fs","parseJSON","rpj","resolve","getWorkspaces","BaseCommand","SetScript","description","params","name","usage","completion","opts","argv","conf","remain","length","json","npm","localPrefix","scripts","catch","er","Object","keys","validate","args","process","env","npm_lifecycle_event","Error","exec","cb","set","then","warn","setScript","execWorkspaces","filters","setWorkspaces","workspaces","path","err","error","message","exitCode","value","manifest","readFileSync","Symbol","for","indent","newline","content","JSON","stringify","replace","writeFileSync","module","exports"],"mappings":"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","sourcesContent":["const log = require('npmlog')\nconst fs = require('fs')\nconst parseJSON = require('json-parse-even-better-errors')\nconst rpj = require('read-package-json-fast')\nconst { resolve } = require('path')\nconst getWorkspaces = require('./workspaces/get-workspaces.js')\n\nconst BaseCommand = require('./base-command.js')\nclass SetScript extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Set tasks in the scripts section of package.json'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['workspace', 'workspaces']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'set-script'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[<script>] [<command>]']\n  }\n\n  async completion (opts) {\n    const argv = opts.conf.argv.remain\n    if (argv.length === 2) {\n      // find the script name\n      const json = resolve(this.npm.localPrefix, 'package.json')\n      const { scripts = {} } = await rpj(json).catch(er => ({}))\n      return Object.keys(scripts)\n    }\n  }\n\n  validate (args) {\n    if (process.env.npm_lifecycle_event === 'postinstall')\n      throw new Error('Scripts can’t set from the postinstall script')\n\n    // Parse arguments\n    if (args.length !== 2)\n      throw new Error(`Expected 2 arguments: got ${args.length}`)\n  }\n\n  exec (args, cb) {\n    this.set(args).then(() => cb()).catch(cb)\n  }\n\n  async set (args) {\n    this.validate(args)\n    const warn = this.setScript(this.npm.localPrefix, args[0], args[1])\n    if (warn)\n      log.warn('set-script', `Script \"${args[0]}\" was overwritten`)\n  }\n\n  execWorkspaces (args, filters, cb) {\n    this.setWorkspaces(args, filters).then(() => cb()).catch(cb)\n  }\n\n  async setWorkspaces (args, filters) {\n    this.validate(args)\n    const workspaces =\n      await getWorkspaces(filters, { path: this.npm.localPrefix })\n\n    for (const [name, path] of workspaces) {\n      try {\n        const warn = this.setScript(path, args[0], args[1])\n        if (warn) {\n          log.warn('set-script', `Script \"${args[0]}\" was overwritten`)\n          log.warn(`  in workspace: ${name}`)\n          log.warn(`  at location: ${path}`)\n        }\n      } catch (err) {\n        log.error('set-script', err.message)\n        log.error(`  in workspace: ${name}`)\n        log.error(`  at location: ${path}`)\n        process.exitCode = 1\n      }\n    }\n  }\n\n  // returns a Boolean that will be true if\n  // the requested script was overwritten\n  // and false if it was set as a new script\n  setScript (path, name, value) {\n    // Set the script\n    let manifest\n    let warn = false\n\n    try {\n      manifest = fs.readFileSync(resolve(path, 'package.json'), 'utf-8')\n    } catch (error) {\n      throw new Error('package.json not found')\n    }\n\n    try {\n      manifest = parseJSON(manifest)\n    } catch (error) {\n      throw new Error(`Invalid package.json: ${error}`)\n    }\n\n    if (!manifest.scripts)\n      manifest.scripts = {}\n\n    if (manifest.scripts[name] && manifest.scripts[name] !== value)\n      warn = true\n    manifest.scripts[name] = value\n\n    // format content\n    const {\n      [Symbol.for('indent')]: indent,\n      [Symbol.for('newline')]: newline,\n    } = manifest\n\n    const content = (JSON.stringify(manifest, null, indent) + '\\n')\n      .replace(/\\n/g, newline)\n    fs.writeFileSync(resolve(path, 'package.json'), content)\n\n    return warn\n  }\n}\nmodule.exports = SetScript\n"]},"metadata":{},"sourceType":"script"}