{"ast":null,"code":"// called with all the options already set to their defaults\nconst retrieveTag = require('./retrieve-tag.js');\n\nconst semver = require('semver');\n\nconst enforceClean = require('./enforce-clean.js');\n\nconst writeJson = require('./write-json.js');\n\nconst readJson = require('./read-json.js');\n\nconst git = require('@npmcli/git');\n\nconst commit = require('./commit.js');\n\nconst tag = require('./tag.js');\n\nconst runScript = require('@npmcli/run-script');\n\nmodule.exports = async (newversion, opts) => {\n  const {\n    path,\n    allowSameVersion,\n    tagVersionPrefix,\n    commitHooks,\n    gitTagVersion,\n    signGitCommit,\n    signGitTag,\n    force,\n    ignoreScripts,\n    preid,\n    pkg,\n    log,\n    message\n  } = opts;\n  const {\n    valid,\n    clean,\n    inc\n  } = semver;\n  const current = pkg.version || '0.0.0';\n  const currentClean = clean(current);\n  const newV = valid(newversion, {\n    loose: true\n  }) ? clean(newversion, {\n    loose: true\n  }) : newversion === 'from-git' ? await retrieveTag(opts) : inc(currentClean, newversion, {\n    loose: true\n  }, preid);\n\n  if (!newV) {\n    throw Object.assign(new Error('Invalid version: ' + newversion), {\n      current,\n      requested: newversion\n    });\n  }\n\n  if (newV === currentClean && !allowSameVersion) {\n    throw Object.assign(new Error('Version not changed'), {\n      current,\n      requested: newversion,\n      newVersion: newV\n    });\n  }\n\n  const isGitDir = newversion === 'from-git' || (await git.is(opts)); // ok!  now we know the new version, and the old version is in pkg\n  // - check if git dir is clean\n  // returns false if we should not keep doing git stuff\n\n  const doGit = gitTagVersion && isGitDir && (await enforceClean(opts));\n\n  if (!ignoreScripts) {\n    await runScript({ ...opts,\n      pkg,\n      stdio: 'inherit',\n      event: 'preversion',\n      banner: log.level !== 'silent',\n      env: {\n        npm_old_version: current,\n        npm_new_version: newV\n      }\n    });\n  } // - update the files\n\n\n  pkg.version = newV;\n  delete pkg._id;\n  await writeJson(`${path}/package.json`, pkg); // try to update shrinkwrap, but ok if this fails\n\n  const locks = [`${path}/package-lock.json`, `${path}/npm-shrinkwrap.json`];\n  const haveLocks = [];\n\n  for (const lock of locks) {\n    try {\n      const sw = await readJson(lock);\n      sw.version = newV;\n\n      if (sw.packages && sw.packages['']) {\n        sw.packages[''].version = newV;\n      }\n\n      await writeJson(lock, sw);\n      haveLocks.push(lock);\n    } catch (er) {}\n  }\n\n  if (!ignoreScripts) {\n    await runScript({ ...opts,\n      pkg,\n      stdio: 'inherit',\n      event: 'version',\n      banner: log.level !== 'silent',\n      env: {\n        npm_old_version: current,\n        npm_new_version: newV\n      }\n    });\n  }\n\n  if (doGit) {\n    // - git add, git commit, git tag\n    await git.spawn(['add', `${path}/package.json`], opts); // sometimes people .gitignore their lockfiles\n\n    for (const lock of haveLocks) {\n      await git.spawn(['add', lock], opts).catch(() => {});\n    }\n\n    await commit(newV, opts);\n    await tag(newV, opts);\n  } else log.verbose('version', 'Not tagging: not in a git repo or no git cmd');\n\n  if (!ignoreScripts) {\n    await runScript({ ...opts,\n      pkg,\n      stdio: 'inherit',\n      event: 'postversion',\n      banner: log.level !== 'silent',\n      env: {\n        npm_old_version: current,\n        npm_new_version: newV\n      }\n    });\n  }\n\n  return newV;\n};","map":{"version":3,"sources":["/Users/kaelen/nsc-mds/node_modules/npm/node_modules/libnpmversion/lib/version.js"],"names":["retrieveTag","require","semver","enforceClean","writeJson","readJson","git","commit","tag","runScript","module","exports","newversion","opts","path","allowSameVersion","tagVersionPrefix","commitHooks","gitTagVersion","signGitCommit","signGitTag","force","ignoreScripts","preid","pkg","log","message","valid","clean","inc","current","version","currentClean","newV","loose","Object","assign","Error","requested","newVersion","isGitDir","is","doGit","stdio","event","banner","level","env","npm_old_version","npm_new_version","_id","locks","haveLocks","lock","sw","packages","push","er","spawn","catch","verbose"],"mappings":"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","sourcesContent":["// called with all the options already set to their defaults\n\nconst retrieveTag = require('./retrieve-tag.js')\nconst semver = require('semver')\nconst enforceClean = require('./enforce-clean.js')\nconst writeJson = require('./write-json.js')\nconst readJson = require('./read-json.js')\nconst git = require('@npmcli/git')\nconst commit = require('./commit.js')\nconst tag = require('./tag.js')\n\nconst runScript = require('@npmcli/run-script')\n\nmodule.exports = async (newversion, opts) => {\n  const {\n    path,\n    allowSameVersion,\n    tagVersionPrefix,\n    commitHooks,\n    gitTagVersion,\n    signGitCommit,\n    signGitTag,\n    force,\n    ignoreScripts,\n    preid,\n    pkg,\n    log,\n    message,\n  } = opts\n\n  const { valid, clean, inc } = semver\n  const current = pkg.version || '0.0.0'\n  const currentClean = clean(current)\n\n  const newV = valid(newversion, { loose: true }) ? clean(newversion, { loose: true })\n    : newversion === 'from-git' ? await retrieveTag(opts)\n    : inc(currentClean, newversion, { loose: true }, preid)\n\n  if (!newV) {\n    throw Object.assign(new Error('Invalid version: ' + newversion), {\n      current,\n      requested: newversion,\n    })\n  }\n\n  if (newV === currentClean && !allowSameVersion) {\n    throw Object.assign(new Error('Version not changed'), {\n      current,\n      requested: newversion,\n      newVersion: newV,\n    })\n  }\n\n  const isGitDir = newversion === 'from-git' || await git.is(opts)\n\n  // ok!  now we know the new version, and the old version is in pkg\n\n  // - check if git dir is clean\n  // returns false if we should not keep doing git stuff\n  const doGit = gitTagVersion && isGitDir && await enforceClean(opts)\n\n  if (!ignoreScripts) {\n    await runScript({\n      ...opts,\n      pkg,\n      stdio: 'inherit',\n      event: 'preversion',\n      banner: log.level !== 'silent',\n      env: {\n        npm_old_version: current,\n        npm_new_version: newV,\n      },\n    })\n  }\n\n  // - update the files\n  pkg.version = newV\n  delete pkg._id\n  await writeJson(`${path}/package.json`, pkg)\n\n  // try to update shrinkwrap, but ok if this fails\n  const locks = [`${path}/package-lock.json`, `${path}/npm-shrinkwrap.json`]\n  const haveLocks = []\n  for (const lock of locks) {\n    try {\n      const sw = await readJson(lock)\n      sw.version = newV\n      if (sw.packages && sw.packages['']) {\n        sw.packages[''].version = newV\n      }\n      await writeJson(lock, sw)\n      haveLocks.push(lock)\n    } catch (er) {}\n  }\n\n  if (!ignoreScripts) {\n    await runScript({\n      ...opts,\n      pkg,\n      stdio: 'inherit',\n      event: 'version',\n      banner: log.level !== 'silent',\n      env: {\n        npm_old_version: current,\n        npm_new_version: newV,\n      },\n    })\n  }\n\n  if (doGit) {\n    // - git add, git commit, git tag\n    await git.spawn(['add', `${path}/package.json`], opts)\n    // sometimes people .gitignore their lockfiles\n    for (const lock of haveLocks) {\n      await git.spawn(['add', lock], opts).catch(() => {})\n    }\n    await commit(newV, opts)\n    await tag(newV, opts)\n  } else\n    log.verbose('version', 'Not tagging: not in a git repo or no git cmd')\n\n  if (!ignoreScripts) {\n    await runScript({\n      ...opts,\n      pkg,\n      stdio: 'inherit',\n      event: 'postversion',\n      banner: log.level !== 'silent',\n      env: {\n        npm_old_version: current,\n        npm_new_version: newV,\n      },\n    })\n  }\n\n  return newV\n}\n"]},"metadata":{},"sourceType":"script"}