{"ast":null,"code":"// helper function to output a clearer visualization\n// of the current node and its descendents\nconst util = require('util');\n\nconst relpath = require('./relpath.js');\n\nclass ArboristNode {\n  constructor(tree, path) {\n    this.name = tree.name;\n    if (tree.package.name && tree.package.name !== this.name) this.packageName = tree.package.name;\n    if (tree.version) this.version = tree.version;\n    this.location = tree.location;\n    this.path = tree.path;\n    if (tree.realpath !== this.path) this.realpath = tree.realpath;\n    if (tree.resolved !== null) this.resolved = tree.resolved;\n    if (tree.extraneous) this.extraneous = true;\n    if (tree.dev) this.dev = true;\n    if (tree.optional) this.optional = true;\n    if (tree.devOptional && !tree.dev && !tree.optional) this.devOptional = true;\n    if (tree.peer) this.peer = true;\n    if (tree.inBundle) this.bundled = true;\n    if (tree.error) this.error = treeError(tree.error);\n    if (tree.errors && tree.errors.length) this.errors = tree.errors.map(treeError); // edgesOut sorted by name\n\n    if (tree.edgesOut.size) {\n      this.edgesOut = new Map([...tree.edgesOut.entries()].sort(([a], [b]) => a.localeCompare(b)).map(([name, edge]) => [name, new EdgeOut(edge)]));\n    } // edgesIn sorted by location\n\n\n    if (tree.edgesIn.size) {\n      this.edgesIn = new Set([...tree.edgesIn].sort((a, b) => a.from.location.localeCompare(b.from.location)).map(edge => new EdgeIn(edge)));\n    }\n\n    if (tree.workspaces && tree.workspaces.size) {\n      this.workspaces = new Map([...tree.workspaces.entries()].map(([name, path]) => [name, relpath(tree.root.realpath, path)]));\n    } // fsChildren sorted by path\n\n\n    if (tree.fsChildren.size) {\n      this.fsChildren = new Set([...tree.fsChildren].sort(({\n        path: a\n      }, {\n        path: b\n      }) => a.localeCompare(b)).map(tree => printableTree(tree, path)));\n    } // children sorted by name\n\n\n    if (tree.children.size) {\n      this.children = new Map([...tree.children.entries()].sort(([a], [b]) => a.localeCompare(b)).map(([name, tree]) => [name, printableTree(tree, path)]));\n    }\n  }\n\n}\n\nclass ArboristVirtualNode extends ArboristNode {\n  constructor(tree, path) {\n    super(tree, path);\n    this.sourceReference = printableTree(tree.sourceReference, path);\n  }\n\n}\n\nclass ArboristLink extends ArboristNode {\n  constructor(tree, path) {\n    super(tree, path);\n    this.target = printableTree(tree.target, path);\n  }\n\n}\n\nconst treeError = ({\n  code,\n  path\n}) => ({\n  code,\n  ...(path ? {\n    path\n  } : {})\n}); // print out edges without dumping the full node all over again\n// this base class will toJSON as a plain old object, but the\n// util.inspect() output will be a bit cleaner\n\n\nclass Edge {\n  constructor(edge) {\n    this.type = edge.type;\n    this.name = edge.name;\n    this.spec = edge.spec || '*';\n    if (edge.error) this.error = edge.error;\n  }\n\n} // don't care about 'from' for edges out\n\n\nclass EdgeOut extends Edge {\n  constructor(edge) {\n    super(edge);\n    this.to = edge.to && edge.to.location;\n  }\n\n  [util.inspect.custom]() {\n    return `{ ${this.type} ${this.name}@${this.spec}${this.to ? ' -> ' + this.to : ''}${this.error ? ' ' + this.error : ''} }`;\n  }\n\n} // don't care about 'to' for edges in\n\n\nclass EdgeIn extends Edge {\n  constructor(edge) {\n    super(edge);\n    this.from = edge.from && edge.from.location;\n  }\n\n  [util.inspect.custom]() {\n    return `{ ${this.from || '\"\"'} ${this.type} ${this.name}@${this.spec}${this.error ? ' ' + this.error : ''} }`;\n  }\n\n}\n\nconst printableTree = (tree, path = []) => {\n  if (!tree) return tree;\n  const Cls = tree.isLink ? ArboristLink : tree.sourceReference ? ArboristVirtualNode : ArboristNode;\n\n  if (path.includes(tree)) {\n    const obj = Object.create(Cls.prototype);\n    return Object.assign(obj, {\n      location: tree.location\n    });\n  }\n\n  path.push(tree);\n  return new Cls(tree, path);\n};\n\nmodule.exports = printableTree;","map":{"version":3,"sources":["/Users/kaelen/nsc-mds/node_modules/npm/node_modules/@npmcli/arborist/lib/printable.js"],"names":["util","require","relpath","ArboristNode","constructor","tree","path","name","package","packageName","version","location","realpath","resolved","extraneous","dev","optional","devOptional","peer","inBundle","bundled","error","treeError","errors","length","map","edgesOut","size","Map","entries","sort","a","b","localeCompare","edge","EdgeOut","edgesIn","Set","from","EdgeIn","workspaces","root","fsChildren","printableTree","children","ArboristVirtualNode","sourceReference","ArboristLink","target","code","Edge","type","spec","to","inspect","custom","Cls","isLink","includes","obj","Object","create","prototype","assign","push","module","exports"],"mappings":"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","sourcesContent":["// helper function to output a clearer visualization\n// of the current node and its descendents\n\nconst util = require('util')\nconst relpath = require('./relpath.js')\n\nclass ArboristNode {\n  constructor (tree, path) {\n    this.name = tree.name\n    if (tree.package.name && tree.package.name !== this.name)\n      this.packageName = tree.package.name\n    if (tree.version)\n      this.version = tree.version\n    this.location = tree.location\n    this.path = tree.path\n    if (tree.realpath !== this.path)\n      this.realpath = tree.realpath\n    if (tree.resolved !== null)\n      this.resolved = tree.resolved\n    if (tree.extraneous)\n      this.extraneous = true\n    if (tree.dev)\n      this.dev = true\n    if (tree.optional)\n      this.optional = true\n    if (tree.devOptional && !tree.dev && !tree.optional)\n      this.devOptional = true\n    if (tree.peer)\n      this.peer = true\n    if (tree.inBundle)\n      this.bundled = true\n    if (tree.error)\n      this.error = treeError(tree.error)\n    if (tree.errors && tree.errors.length)\n      this.errors = tree.errors.map(treeError)\n\n    // edgesOut sorted by name\n    if (tree.edgesOut.size) {\n      this.edgesOut = new Map([...tree.edgesOut.entries()]\n        .sort(([a], [b]) => a.localeCompare(b))\n        .map(([name, edge]) => [name, new EdgeOut(edge)]))\n    }\n\n    // edgesIn sorted by location\n    if (tree.edgesIn.size) {\n      this.edgesIn = new Set([...tree.edgesIn]\n        .sort((a, b) => a.from.location.localeCompare(b.from.location))\n        .map(edge => new EdgeIn(edge)))\n    }\n\n    if (tree.workspaces && tree.workspaces.size) {\n      this.workspaces = new Map([...tree.workspaces.entries()]\n        .map(([name, path]) => [name, relpath(tree.root.realpath, path)]))\n    }\n\n    // fsChildren sorted by path\n    if (tree.fsChildren.size) {\n      this.fsChildren = new Set([...tree.fsChildren]\n        .sort(({path: a}, {path: b}) => a.localeCompare(b))\n        .map(tree => printableTree(tree, path)))\n    }\n\n    // children sorted by name\n    if (tree.children.size) {\n      this.children = new Map([...tree.children.entries()]\n        .sort(([a], [b]) => a.localeCompare(b))\n        .map(([name, tree]) => [name, printableTree(tree, path)]))\n    }\n  }\n}\n\nclass ArboristVirtualNode extends ArboristNode {\n  constructor (tree, path) {\n    super(tree, path)\n    this.sourceReference = printableTree(tree.sourceReference, path)\n  }\n}\n\nclass ArboristLink extends ArboristNode {\n  constructor (tree, path) {\n    super(tree, path)\n    this.target = printableTree(tree.target, path)\n  }\n}\n\nconst treeError = ({code, path}) => ({\n  code,\n  ...(path ? { path } : {}),\n})\n\n// print out edges without dumping the full node all over again\n// this base class will toJSON as a plain old object, but the\n// util.inspect() output will be a bit cleaner\nclass Edge {\n  constructor (edge) {\n    this.type = edge.type\n    this.name = edge.name\n    this.spec = edge.spec || '*'\n    if (edge.error)\n      this.error = edge.error\n  }\n}\n\n// don't care about 'from' for edges out\nclass EdgeOut extends Edge {\n  constructor (edge) {\n    super(edge)\n    this.to = edge.to && edge.to.location\n  }\n\n  [util.inspect.custom] () {\n    return `{ ${this.type} ${this.name}@${this.spec}${\n      this.to ? ' -> ' + this.to : ''\n    }${\n      this.error ? ' ' + this.error : ''\n    } }`\n  }\n}\n\n// don't care about 'to' for edges in\nclass EdgeIn extends Edge {\n  constructor (edge) {\n    super(edge)\n    this.from = edge.from && edge.from.location\n  }\n\n  [util.inspect.custom] () {\n    return `{ ${this.from || '\"\"'} ${this.type} ${this.name}@${this.spec}${\n      this.error ? ' ' + this.error : ''\n    } }`\n  }\n}\n\nconst printableTree = (tree, path = []) => {\n  if (!tree)\n    return tree\n\n  const Cls = tree.isLink ? ArboristLink\n    : tree.sourceReference ? ArboristVirtualNode\n    : ArboristNode\n  if (path.includes(tree)) {\n    const obj = Object.create(Cls.prototype)\n    return Object.assign(obj, { location: tree.location })\n  }\n  path.push(tree)\n  return new Cls(tree, path)\n}\n\nmodule.exports = printableTree\n"]},"metadata":{},"sourceType":"script"}