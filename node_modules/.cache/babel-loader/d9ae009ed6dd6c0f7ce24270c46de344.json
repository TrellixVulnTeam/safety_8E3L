{"ast":null,"code":"const util = require('util');\n\nconst log = require('npmlog');\n\nconst semver = require('semver');\n\nconst pack = require('libnpmpack');\n\nconst libpub = require('libnpmpublish').publish;\n\nconst runScript = require('@npmcli/run-script');\n\nconst pacote = require('pacote');\n\nconst npa = require('npm-package-arg');\n\nconst npmFetch = require('npm-registry-fetch');\n\nconst flatten = require('./utils/config/flatten.js');\n\nconst otplease = require('./utils/otplease.js');\n\nconst {\n  getContents,\n  logTar\n} = require('./utils/tar.js'); // this is the only case in the CLI where we use the old full slow\n// 'read-package-json' module, because we want to pull in all the\n// defaults and metadata, like git sha's and default scripts and all that.\n\n\nconst readJson = util.promisify(require('read-package-json'));\n\nconst BaseCommand = require('./base-command.js');\n\nclass Publish extends BaseCommand {\n  static get description() {\n    return 'Publish a package';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'publish';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['tag', 'access', 'dry-run'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['[<folder>]'];\n  }\n\n  exec(args, cb) {\n    this.publish(args).then(() => cb()).catch(cb);\n  }\n\n  async publish(args) {\n    if (args.length === 0) args = ['.'];\n    if (args.length !== 1) throw this.usage;\n    log.verbose('publish', args);\n    const unicode = this.npm.config.get('unicode');\n    const dryRun = this.npm.config.get('dry-run');\n    const json = this.npm.config.get('json');\n    const defaultTag = this.npm.config.get('tag');\n    if (semver.validRange(defaultTag)) throw new Error('Tag name must not be a valid SemVer range: ' + defaultTag.trim());\n    const opts = { ...this.npm.flatOptions\n    }; // you can publish name@version, ./foo.tgz, etc.\n    // even though the default is the 'file:.' cwd.\n\n    const spec = npa(args[0]);\n    let manifest = await this.getManifest(spec, opts);\n    if (manifest.publishConfig) Object.assign(opts, this.publishConfigToOpts(manifest.publishConfig)); // only run scripts for directory type publishes\n\n    if (spec.type === 'directory') {\n      await runScript({\n        event: 'prepublishOnly',\n        path: spec.fetchSpec,\n        stdio: 'inherit',\n        pkg: manifest,\n        banner: log.level !== 'silent'\n      });\n    }\n\n    const tarballData = await pack(spec, opts);\n    const pkgContents = await getContents(manifest, tarballData); // The purpose of re-reading the manifest is in case it changed,\n    // so that we send the latest and greatest thing to the registry\n    // note that publishConfig might have changed as well!\n\n    manifest = await this.getManifest(spec, opts);\n    if (manifest.publishConfig) Object.assign(opts, this.publishConfigToOpts(manifest.publishConfig)); // note that logTar calls npmlog.notice(), so if we ARE in silent mode,\n    // this will do nothing, but we still want it in the debuglog if it fails.\n\n    if (!json) logTar(pkgContents, {\n      log,\n      unicode\n    });\n\n    if (!dryRun) {\n      const resolved = npa.resolve(manifest.name, manifest.version);\n      const registry = npmFetch.pickRegistry(resolved, opts);\n      const creds = this.npm.config.getCredentialsByURI(registry);\n\n      if (!creds.token && !creds.username) {\n        throw Object.assign(new Error('This command requires you to be logged in.'), {\n          code: 'ENEEDAUTH'\n        });\n      }\n\n      await otplease(opts, opts => libpub(manifest, tarballData, opts));\n    }\n\n    if (spec.type === 'directory') {\n      await runScript({\n        event: 'publish',\n        path: spec.fetchSpec,\n        stdio: 'inherit',\n        pkg: manifest,\n        banner: log.level !== 'silent'\n      });\n      await runScript({\n        event: 'postpublish',\n        path: spec.fetchSpec,\n        stdio: 'inherit',\n        pkg: manifest,\n        banner: log.level !== 'silent'\n      });\n    }\n\n    const silent = log.level === 'silent';\n    if (!silent && json) this.npm.output(JSON.stringify(pkgContents, null, 2));else if (!silent) this.npm.output(`+ ${pkgContents.id}`);\n    return pkgContents;\n  } // if it's a directory, read it from the file system\n  // otherwise, get the full metadata from whatever it is\n\n\n  getManifest(spec, opts) {\n    if (spec.type === 'directory') return readJson(`${spec.fetchSpec}/package.json`);\n    return pacote.manifest(spec, { ...opts,\n      fullMetadata: true\n    });\n  } // for historical reasons, publishConfig in package.json can contain\n  // ANY config keys that npm supports in .npmrc files and elsewhere.\n  // We *may* want to revisit this at some point, and have a minimal set\n  // that's a SemVer-major change that ought to get a RFC written on it.\n\n\n  publishConfigToOpts(publishConfig) {\n    // create a new object that inherits from the config stack\n    // then squash the css-case into camelCase opts, like we do\n    // this is Object.assign()'ed onto the base npm.flatOptions\n    return flatten(publishConfig, {});\n  }\n\n}\n\nmodule.exports = Publish;","map":{"version":3,"sources":["/Users/kaelen/nsc-mds/node_modules/npm/lib/publish.js"],"names":["util","require","log","semver","pack","libpub","publish","runScript","pacote","npa","npmFetch","flatten","otplease","getContents","logTar","readJson","promisify","BaseCommand","Publish","description","name","params","usage","exec","args","cb","then","catch","length","verbose","unicode","npm","config","get","dryRun","json","defaultTag","validRange","Error","trim","opts","flatOptions","spec","manifest","getManifest","publishConfig","Object","assign","publishConfigToOpts","type","event","path","fetchSpec","stdio","pkg","banner","level","tarballData","pkgContents","resolved","resolve","version","registry","pickRegistry","creds","getCredentialsByURI","token","username","code","silent","output","JSON","stringify","id","fullMetadata","module","exports"],"mappings":"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","sourcesContent":["const util = require('util')\nconst log = require('npmlog')\nconst semver = require('semver')\nconst pack = require('libnpmpack')\nconst libpub = require('libnpmpublish').publish\nconst runScript = require('@npmcli/run-script')\nconst pacote = require('pacote')\nconst npa = require('npm-package-arg')\nconst npmFetch = require('npm-registry-fetch')\n\nconst flatten = require('./utils/config/flatten.js')\nconst otplease = require('./utils/otplease.js')\nconst { getContents, logTar } = require('./utils/tar.js')\n\n// this is the only case in the CLI where we use the old full slow\n// 'read-package-json' module, because we want to pull in all the\n// defaults and metadata, like git sha's and default scripts and all that.\nconst readJson = util.promisify(require('read-package-json'))\n\nconst BaseCommand = require('./base-command.js')\nclass Publish extends BaseCommand {\n  static get description () {\n    return 'Publish a package'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'publish'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['tag', 'access', 'dry-run']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return [\n      '[<folder>]',\n    ]\n  }\n\n  exec (args, cb) {\n    this.publish(args).then(() => cb()).catch(cb)\n  }\n\n  async publish (args) {\n    if (args.length === 0)\n      args = ['.']\n    if (args.length !== 1)\n      throw this.usage\n\n    log.verbose('publish', args)\n\n    const unicode = this.npm.config.get('unicode')\n    const dryRun = this.npm.config.get('dry-run')\n    const json = this.npm.config.get('json')\n    const defaultTag = this.npm.config.get('tag')\n\n    if (semver.validRange(defaultTag))\n      throw new Error('Tag name must not be a valid SemVer range: ' + defaultTag.trim())\n\n    const opts = { ...this.npm.flatOptions }\n\n    // you can publish name@version, ./foo.tgz, etc.\n    // even though the default is the 'file:.' cwd.\n    const spec = npa(args[0])\n    let manifest = await this.getManifest(spec, opts)\n\n    if (manifest.publishConfig)\n      Object.assign(opts, this.publishConfigToOpts(manifest.publishConfig))\n\n    // only run scripts for directory type publishes\n    if (spec.type === 'directory') {\n      await runScript({\n        event: 'prepublishOnly',\n        path: spec.fetchSpec,\n        stdio: 'inherit',\n        pkg: manifest,\n        banner: log.level !== 'silent',\n      })\n    }\n\n    const tarballData = await pack(spec, opts)\n    const pkgContents = await getContents(manifest, tarballData)\n\n    // The purpose of re-reading the manifest is in case it changed,\n    // so that we send the latest and greatest thing to the registry\n    // note that publishConfig might have changed as well!\n    manifest = await this.getManifest(spec, opts)\n    if (manifest.publishConfig)\n      Object.assign(opts, this.publishConfigToOpts(manifest.publishConfig))\n\n    // note that logTar calls npmlog.notice(), so if we ARE in silent mode,\n    // this will do nothing, but we still want it in the debuglog if it fails.\n    if (!json)\n      logTar(pkgContents, { log, unicode })\n\n    if (!dryRun) {\n      const resolved = npa.resolve(manifest.name, manifest.version)\n      const registry = npmFetch.pickRegistry(resolved, opts)\n      const creds = this.npm.config.getCredentialsByURI(registry)\n      if (!creds.token && !creds.username) {\n        throw Object.assign(new Error('This command requires you to be logged in.'), {\n          code: 'ENEEDAUTH',\n        })\n      }\n      await otplease(opts, opts => libpub(manifest, tarballData, opts))\n    }\n\n    if (spec.type === 'directory') {\n      await runScript({\n        event: 'publish',\n        path: spec.fetchSpec,\n        stdio: 'inherit',\n        pkg: manifest,\n        banner: log.level !== 'silent',\n      })\n\n      await runScript({\n        event: 'postpublish',\n        path: spec.fetchSpec,\n        stdio: 'inherit',\n        pkg: manifest,\n        banner: log.level !== 'silent',\n      })\n    }\n\n    const silent = log.level === 'silent'\n    if (!silent && json)\n      this.npm.output(JSON.stringify(pkgContents, null, 2))\n    else if (!silent)\n      this.npm.output(`+ ${pkgContents.id}`)\n\n    return pkgContents\n  }\n\n  // if it's a directory, read it from the file system\n  // otherwise, get the full metadata from whatever it is\n  getManifest (spec, opts) {\n    if (spec.type === 'directory')\n      return readJson(`${spec.fetchSpec}/package.json`)\n    return pacote.manifest(spec, { ...opts, fullMetadata: true })\n  }\n\n  // for historical reasons, publishConfig in package.json can contain\n  // ANY config keys that npm supports in .npmrc files and elsewhere.\n  // We *may* want to revisit this at some point, and have a minimal set\n  // that's a SemVer-major change that ought to get a RFC written on it.\n  publishConfigToOpts (publishConfig) {\n    // create a new object that inherits from the config stack\n    // then squash the css-case into camelCase opts, like we do\n    // this is Object.assign()'ed onto the base npm.flatOptions\n    return flatten(publishConfig, {})\n  }\n}\nmodule.exports = Publish\n"]},"metadata":{},"sourceType":"script"}