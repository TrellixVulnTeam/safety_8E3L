{"ast":null,"code":"'use strict';\n\nconst isHeaderConditional = require('./is-header-conditional'); // Default cacache-based cache\n\n\nconst Cache = require('../cache');\n\nmodule.exports = function initializeCache(opts) {\n  /**\n   * NOTE: `opts.cacheManager` is the path to cache\n   * We're making the assumption that if `opts.cacheManager` *isn't* a string,\n   * it's a cache object\n   */\n  if (typeof opts.cacheManager === 'string') {\n    // Need to make a cache object\n    opts.cacheManager = new Cache(opts.cacheManager, opts);\n  }\n\n  opts.cache = opts.cache || 'default';\n\n  if (opts.cache === 'default' && isHeaderConditional(opts.headers)) {\n    // If header list contains `If-Modified-Since`, `If-None-Match`,\n    // `If-Unmodified-Since`, `If-Match`, or `If-Range`, fetch will set cache\n    // mode to \"no-store\" if it is \"default\".\n    opts.cache = 'no-store';\n  }\n};","map":{"version":3,"sources":["/Users/kaelen/nsc-mds/node_modules/npm/node_modules/make-fetch-happen/utils/initialize-cache.js"],"names":["isHeaderConditional","require","Cache","module","exports","initializeCache","opts","cacheManager","cache","headers"],"mappings":"AAAA;;AAEA,MAAMA,mBAAmB,GAAGC,OAAO,CAAC,yBAAD,CAAnC,C,CACA;;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAArB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAA0BC,IAA1B,EAAgC;AAC/C;AACF;AACA;AACA;AACA;AACE,MAAI,OAAOA,IAAI,CAACC,YAAZ,KAA6B,QAAjC,EAA2C;AACzC;AACAD,IAAAA,IAAI,CAACC,YAAL,GAAoB,IAAIL,KAAJ,CAAUI,IAAI,CAACC,YAAf,EAA6BD,IAA7B,CAApB;AACD;;AAEDA,EAAAA,IAAI,CAACE,KAAL,GAAaF,IAAI,CAACE,KAAL,IAAc,SAA3B;;AAEA,MAAIF,IAAI,CAACE,KAAL,KAAe,SAAf,IAA4BR,mBAAmB,CAACM,IAAI,CAACG,OAAN,CAAnD,EAAmE;AACjE;AACA;AACA;AACAH,IAAAA,IAAI,CAACE,KAAL,GAAa,UAAb;AACD;AACF,CAnBD","sourcesContent":["'use strict'\n\nconst isHeaderConditional = require('./is-header-conditional')\n// Default cacache-based cache\nconst Cache = require('../cache')\n\nmodule.exports = function initializeCache (opts) {\n  /**\n   * NOTE: `opts.cacheManager` is the path to cache\n   * We're making the assumption that if `opts.cacheManager` *isn't* a string,\n   * it's a cache object\n   */\n  if (typeof opts.cacheManager === 'string') {\n    // Need to make a cache object\n    opts.cacheManager = new Cache(opts.cacheManager, opts)\n  }\n\n  opts.cache = opts.cache || 'default'\n\n  if (opts.cache === 'default' && isHeaderConditional(opts.headers)) {\n    // If header list contains `If-Modified-Since`, `If-None-Match`,\n    // `If-Unmodified-Since`, `If-Match`, or `If-Range`, fetch will set cache\n    // mode to \"no-store\" if it is \"default\".\n    opts.cache = 'no-store'\n  }\n}\n"]},"metadata":{},"sourceType":"script"}