{"ast":null,"code":"const util = require('util');\n\nconst Arborist = require('@npmcli/arborist');\n\nconst rimraf = util.promisify(require('rimraf'));\n\nconst reifyFinish = require('./utils/reify-finish.js');\n\nconst runScript = require('@npmcli/run-script');\n\nconst fs = require('fs');\n\nconst readdir = util.promisify(fs.readdir);\n\nconst log = require('npmlog');\n\nconst removeNodeModules = async where => {\n  const rimrafOpts = {\n    glob: false\n  };\n  process.emit('time', 'npm-ci:rm');\n  const path = `${where}/node_modules`; // get the list of entries so we can skip the glob for performance\n\n  const entries = await readdir(path, null).catch(er => []);\n  await Promise.all(entries.map(f => rimraf(`${path}/${f}`, rimrafOpts)));\n  process.emit('timeEnd', 'npm-ci:rm');\n};\n\nconst BaseCommand = require('./base-command.js');\n\nclass CI extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Install a project with a clean slate';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'ci';\n  }\n\n  exec(args, cb) {\n    this.ci().then(() => cb()).catch(cb);\n  }\n\n  async ci() {\n    if (this.npm.config.get('global')) {\n      const err = new Error('`npm ci` does not work for global packages');\n      err.code = 'ECIGLOBAL';\n      throw err;\n    }\n\n    const where = this.npm.prefix;\n    const opts = { ...this.npm.flatOptions,\n      path: where,\n      log: this.npm.log,\n      save: false // npm ci should never modify the lockfile or package.json\n\n    };\n    const arb = new Arborist(opts);\n    await Promise.all([arb.loadVirtual().catch(er => {\n      log.verbose('loadVirtual', er.stack);\n      const msg = 'The `npm ci` command can only install with an existing package-lock.json or\\n' + 'npm-shrinkwrap.json with lockfileVersion >= 1. Run an install with npm@5 or\\n' + 'later to generate a package-lock.json file, then try again.';\n      throw new Error(msg);\n    }), removeNodeModules(where)]);\n    await arb.reify(opts);\n    const ignoreScripts = this.npm.config.get('ignore-scripts'); // run the same set of scripts that `npm install` runs.\n\n    if (!ignoreScripts) {\n      const scripts = ['preinstall', 'install', 'postinstall', 'prepublish', // XXX should we remove this finally??\n      'preprepare', 'prepare', 'postprepare'];\n      const scriptShell = this.npm.config.get('script-shell') || undefined;\n\n      for (const event of scripts) {\n        await runScript({\n          path: where,\n          args: [],\n          scriptShell,\n          stdio: 'inherit',\n          stdioString: true,\n          banner: log.level !== 'silent',\n          event\n        });\n      }\n    }\n\n    await reifyFinish(this.npm, arb);\n  }\n\n}\n\nmodule.exports = CI;","map":{"version":3,"sources":["/Users/kaelen/nsc-mds/node_modules/npm/lib/ci.js"],"names":["util","require","Arborist","rimraf","promisify","reifyFinish","runScript","fs","readdir","log","removeNodeModules","where","rimrafOpts","glob","process","emit","path","entries","catch","er","Promise","all","map","f","BaseCommand","CI","description","name","exec","args","cb","ci","then","npm","config","get","err","Error","code","prefix","opts","flatOptions","save","arb","loadVirtual","verbose","stack","msg","reify","ignoreScripts","scripts","scriptShell","undefined","event","stdio","stdioString","banner","level","module","exports"],"mappings":"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","sourcesContent":["const util = require('util')\nconst Arborist = require('@npmcli/arborist')\nconst rimraf = util.promisify(require('rimraf'))\nconst reifyFinish = require('./utils/reify-finish.js')\nconst runScript = require('@npmcli/run-script')\nconst fs = require('fs')\nconst readdir = util.promisify(fs.readdir)\n\nconst log = require('npmlog')\n\nconst removeNodeModules = async where => {\n  const rimrafOpts = { glob: false }\n  process.emit('time', 'npm-ci:rm')\n  const path = `${where}/node_modules`\n  // get the list of entries so we can skip the glob for performance\n  const entries = await readdir(path, null).catch(er => [])\n  await Promise.all(entries.map(f => rimraf(`${path}/${f}`, rimrafOpts)))\n  process.emit('timeEnd', 'npm-ci:rm')\n}\nconst BaseCommand = require('./base-command.js')\n\nclass CI extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Install a project with a clean slate'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'ci'\n  }\n\n  exec (args, cb) {\n    this.ci().then(() => cb()).catch(cb)\n  }\n\n  async ci () {\n    if (this.npm.config.get('global')) {\n      const err = new Error('`npm ci` does not work for global packages')\n      err.code = 'ECIGLOBAL'\n      throw err\n    }\n\n    const where = this.npm.prefix\n    const opts = {\n      ...this.npm.flatOptions,\n      path: where,\n      log: this.npm.log,\n      save: false, // npm ci should never modify the lockfile or package.json\n    }\n\n    const arb = new Arborist(opts)\n    await Promise.all([\n      arb.loadVirtual().catch(er => {\n        log.verbose('loadVirtual', er.stack)\n        const msg =\n          'The `npm ci` command can only install with an existing package-lock.json or\\n' +\n          'npm-shrinkwrap.json with lockfileVersion >= 1. Run an install with npm@5 or\\n' +\n          'later to generate a package-lock.json file, then try again.'\n        throw new Error(msg)\n      }),\n      removeNodeModules(where),\n    ])\n    await arb.reify(opts)\n\n    const ignoreScripts = this.npm.config.get('ignore-scripts')\n    // run the same set of scripts that `npm install` runs.\n    if (!ignoreScripts) {\n      const scripts = [\n        'preinstall',\n        'install',\n        'postinstall',\n        'prepublish', // XXX should we remove this finally??\n        'preprepare',\n        'prepare',\n        'postprepare',\n      ]\n      const scriptShell = this.npm.config.get('script-shell') || undefined\n      for (const event of scripts) {\n        await runScript({\n          path: where,\n          args: [],\n          scriptShell,\n          stdio: 'inherit',\n          stdioString: true,\n          banner: log.level !== 'silent',\n          event,\n        })\n      }\n    }\n    await reifyFinish(this.npm, arb)\n  }\n}\n\nmodule.exports = CI\n"]},"metadata":{},"sourceType":"script"}