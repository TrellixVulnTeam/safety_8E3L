{"ast":null,"code":"const {\n  resolve\n} = require('path');\n\nconst Arborist = require('@npmcli/arborist');\n\nconst rpj = require('read-package-json-fast');\n\nconst reifyFinish = require('./utils/reify-finish.js');\n\nconst completion = require('./utils/completion/installed-shallow.js');\n\nconst BaseCommand = require('./base-command.js');\n\nclass Uninstall extends BaseCommand {\n  static get description() {\n    return 'Remove a package';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'uninstall';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['save'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['[<@scope>/]<pkg>...'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  async completion(opts) {\n    return completion(this.npm, opts);\n  }\n\n  exec(args, cb) {\n    this.uninstall(args).then(() => cb()).catch(cb);\n  }\n\n  async uninstall(args) {\n    // the /path/to/node_modules/..\n    const global = this.npm.config.get('global');\n    const path = global ? resolve(this.npm.globalDir, '..') : this.npm.localPrefix;\n\n    if (!args.length) {\n      if (!global) throw new Error('Must provide a package name to remove');else {\n        let pkg;\n\n        try {\n          pkg = await rpj(resolve(this.npm.localPrefix, 'package.json'));\n        } catch (er) {\n          if (er.code !== 'ENOENT' && er.code !== 'ENOTDIR') throw er;else throw this.usage;\n        }\n\n        args.push(pkg.name);\n      }\n    }\n\n    const opts = { ...this.npm.flatOptions,\n      path,\n      log: this.npm.log,\n      rm: args\n    };\n    const arb = new Arborist(opts);\n    await arb.reify(opts);\n    await reifyFinish(this.npm, arb);\n  }\n\n}\n\nmodule.exports = Uninstall;","map":{"version":3,"sources":["/Users/kaelen/nsc-mds/node_modules/npm/lib/uninstall.js"],"names":["resolve","require","Arborist","rpj","reifyFinish","completion","BaseCommand","Uninstall","description","name","params","usage","opts","npm","exec","args","cb","uninstall","then","catch","global","config","get","path","globalDir","localPrefix","length","Error","pkg","er","code","push","flatOptions","log","rm","arb","reify","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAcC,OAAO,CAAC,MAAD,CAA3B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,kBAAD,CAAxB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,wBAAD,CAAnB;;AAEA,MAAMG,WAAW,GAAGH,OAAO,CAAC,yBAAD,CAA3B;;AACA,MAAMI,UAAU,GAAGJ,OAAO,CAAC,yCAAD,CAA1B;;AAEA,MAAMK,WAAW,GAAGL,OAAO,CAAC,mBAAD,CAA3B;;AACA,MAAMM,SAAN,SAAwBD,WAAxB,CAAoC;AACZ,aAAXE,WAAW,GAAI;AACxB,WAAO,kBAAP;AACD;AAED;;;AACe,aAAJC,IAAI,GAAI;AACjB,WAAO,WAAP;AACD;AAED;;;AACiB,aAANC,MAAM,GAAI;AACnB,WAAO,CAAC,MAAD,CAAP;AACD;AAED;;;AACgB,aAALC,KAAK,GAAI;AAClB,WAAO,CAAC,qBAAD,CAAP;AACD;AAED;;;AACgB,QAAVN,UAAU,CAAEO,IAAF,EAAQ;AACtB,WAAOP,UAAU,CAAC,KAAKQ,GAAN,EAAWD,IAAX,CAAjB;AACD;;AAEDE,EAAAA,IAAI,CAAEC,IAAF,EAAQC,EAAR,EAAY;AACd,SAAKC,SAAL,CAAeF,IAAf,EAAqBG,IAArB,CAA0B,MAAMF,EAAE,EAAlC,EAAsCG,KAAtC,CAA4CH,EAA5C;AACD;;AAEc,QAATC,SAAS,CAAEF,IAAF,EAAQ;AACrB;AACA,UAAMK,MAAM,GAAG,KAAKP,GAAL,CAASQ,MAAT,CAAgBC,GAAhB,CAAoB,QAApB,CAAf;AACA,UAAMC,IAAI,GAAGH,MAAM,GACfpB,OAAO,CAAC,KAAKa,GAAL,CAASW,SAAV,EAAqB,IAArB,CADQ,GAEf,KAAKX,GAAL,CAASY,WAFb;;AAIA,QAAI,CAACV,IAAI,CAACW,MAAV,EAAkB;AAChB,UAAI,CAACN,MAAL,EACE,MAAM,IAAIO,KAAJ,CAAU,uCAAV,CAAN,CADF,KAEK;AACH,YAAIC,GAAJ;;AAEA,YAAI;AACFA,UAAAA,GAAG,GAAG,MAAMzB,GAAG,CAACH,OAAO,CAAC,KAAKa,GAAL,CAASY,WAAV,EAAuB,cAAvB,CAAR,CAAf;AACD,SAFD,CAEE,OAAOI,EAAP,EAAW;AACX,cAAIA,EAAE,CAACC,IAAH,KAAY,QAAZ,IAAwBD,EAAE,CAACC,IAAH,KAAY,SAAxC,EACE,MAAMD,EAAN,CADF,KAGE,MAAM,KAAKlB,KAAX;AACH;;AAEDI,QAAAA,IAAI,CAACgB,IAAL,CAAUH,GAAG,CAACnB,IAAd;AACD;AACF;;AAED,UAAMG,IAAI,GAAG,EACX,GAAG,KAAKC,GAAL,CAASmB,WADD;AAEXT,MAAAA,IAFW;AAGXU,MAAAA,GAAG,EAAE,KAAKpB,GAAL,CAASoB,GAHH;AAIXC,MAAAA,EAAE,EAAEnB;AAJO,KAAb;AAOA,UAAMoB,GAAG,GAAG,IAAIjC,QAAJ,CAAaU,IAAb,CAAZ;AACA,UAAMuB,GAAG,CAACC,KAAJ,CAAUxB,IAAV,CAAN;AACA,UAAMR,WAAW,CAAC,KAAKS,GAAN,EAAWsB,GAAX,CAAjB;AACD;;AAjEiC;;AAmEpCE,MAAM,CAACC,OAAP,GAAiB/B,SAAjB","sourcesContent":["const { resolve } = require('path')\nconst Arborist = require('@npmcli/arborist')\nconst rpj = require('read-package-json-fast')\n\nconst reifyFinish = require('./utils/reify-finish.js')\nconst completion = require('./utils/completion/installed-shallow.js')\n\nconst BaseCommand = require('./base-command.js')\nclass Uninstall extends BaseCommand {\n  static get description () {\n    return 'Remove a package'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'uninstall'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['save']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[<@scope>/]<pkg>...']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  async completion (opts) {\n    return completion(this.npm, opts)\n  }\n\n  exec (args, cb) {\n    this.uninstall(args).then(() => cb()).catch(cb)\n  }\n\n  async uninstall (args) {\n    // the /path/to/node_modules/..\n    const global = this.npm.config.get('global')\n    const path = global\n      ? resolve(this.npm.globalDir, '..')\n      : this.npm.localPrefix\n\n    if (!args.length) {\n      if (!global)\n        throw new Error('Must provide a package name to remove')\n      else {\n        let pkg\n\n        try {\n          pkg = await rpj(resolve(this.npm.localPrefix, 'package.json'))\n        } catch (er) {\n          if (er.code !== 'ENOENT' && er.code !== 'ENOTDIR')\n            throw er\n          else\n            throw this.usage\n        }\n\n        args.push(pkg.name)\n      }\n    }\n\n    const opts = {\n      ...this.npm.flatOptions,\n      path,\n      log: this.npm.log,\n      rm: args,\n\n    }\n    const arb = new Arborist(opts)\n    await arb.reify(opts)\n    await reifyFinish(this.npm, arb)\n  }\n}\nmodule.exports = Uninstall\n"]},"metadata":{},"sourceType":"script"}