{"ast":null,"code":"// The order of the code in this file is relevant, because a lot of things\n// require('npm.js'), but also we need to use some of those modules.  So,\n// we define and instantiate the singleton ahead of loading any modules\n// required for its methods.\n// these are all dependencies used in the ctor\nconst EventEmitter = require('events');\n\nconst {\n  resolve,\n  dirname\n} = require('path');\n\nconst Config = require('@npmcli/config'); // Patch the global fs module here at the app level\n\n\nrequire('graceful-fs').gracefulify(require('fs'));\n\nconst procLogListener = require('./utils/proc-log-listener.js');\n\nconst proxyCmds = new Proxy({}, {\n  get: (target, cmd) => {\n    const actual = deref(cmd);\n\n    if (actual && !Reflect.has(target, actual)) {\n      const Impl = require(`./${actual}.js`);\n\n      const impl = new Impl(npm); // Our existing npm.commands[x] act like a function with attributes, but\n      // our modules have non-inumerable attributes so we can't just assign\n      // them to an anonymous function like we used to.  This acts like that\n      // old way of doing things, until we can make breaking changes to the\n      // npm.commands[x] api\n\n      target[actual] = new Proxy((args, cb) => npm[_runCmd](actual, impl, args, cb), {\n        get: (target, attr, receiver) => {\n          return Reflect.get(impl, attr, receiver);\n        }\n      });\n    }\n\n    return target[actual];\n  }\n});\n\nconst {\n  definitions,\n  flatten,\n  shorthands\n} = require('./utils/config/index.js');\n\nconst {\n  shellouts\n} = require('./utils/cmd-list.js');\n\nconst usage = require('./utils/npm-usage.js');\n\nlet warnedNonDashArg = false;\n\nconst _runCmd = Symbol('_runCmd');\n\nconst _load = Symbol('_load');\n\nconst _tmpFolder = Symbol('_tmpFolder');\n\nconst _title = Symbol('_title');\n\nconst npm = module.exports = new class extends EventEmitter {\n  constructor() {\n    super();\n\n    require('./utils/perf.js');\n\n    this.started = Date.now();\n    this.command = null;\n    this.commands = proxyCmds;\n    procLogListener();\n    process.emit('time', 'npm');\n    this.version = require('../package.json').version;\n    this.config = new Config({\n      npmPath: dirname(__dirname),\n      definitions,\n      flatten,\n      shorthands\n    });\n    this[_title] = process.title;\n    this.updateNotification = null;\n  }\n\n  get shelloutCommands() {\n    return shellouts;\n  }\n\n  deref(c) {\n    return deref(c);\n  } // this will only ever be called with cmd set to the canonical command name\n\n\n  [_runCmd](cmd, impl, args, cb) {\n    if (!this.loaded) {\n      throw new Error('Call npm.load(cb) before using this command.\\n' + 'See the README.md or bin/npm-cli.js for example usage.');\n    }\n\n    process.emit('time', `command:${cmd}`); // since 'test', 'start', 'stop', etc. commands re-enter this function\n    // to call the run-script command, we need to only set it one time.\n\n    if (!this.command) {\n      process.env.npm_command = cmd;\n      this.command = cmd;\n    } // Options are prefixed by a hyphen-minus (-, \\u2d).\n    // Other dash-type chars look similar but are invalid.\n\n\n    if (!warnedNonDashArg) {\n      args.filter(arg => /^[\\u2010-\\u2015\\u2212\\uFE58\\uFE63\\uFF0D]/.test(arg)).forEach(arg => {\n        warnedNonDashArg = true;\n        log.error('arg', 'Argument starts with non-ascii dash, this is probably invalid:', arg);\n      });\n    }\n\n    const workspacesEnabled = this.config.get('workspaces');\n    const workspacesFilters = this.config.get('workspace');\n    const filterByWorkspaces = workspacesEnabled || workspacesFilters.length > 0;\n\n    if (this.config.get('usage')) {\n      this.output(impl.usage);\n      cb();\n    } else if (filterByWorkspaces) {\n      impl.execWorkspaces(args, this.config.get('workspace'), er => {\n        process.emit('timeEnd', `command:${cmd}`);\n        cb(er);\n      });\n    } else {\n      impl.exec(args, er => {\n        process.emit('timeEnd', `command:${cmd}`);\n        cb(er);\n      });\n    }\n  } // call with parsed CLI options and a callback when done loading\n  // XXX promisify this and stop taking a callback\n\n\n  load(cb) {\n    if (!cb || typeof cb !== 'function') throw new TypeError('must call as: npm.load(callback)');\n    this.once('load', cb);\n\n    if (this.loaded || this.loadErr) {\n      this.emit('load', this.loadErr);\n      return;\n    }\n\n    if (this.loading) return;\n    this.loading = true;\n    process.emit('time', 'npm:load');\n    this.log.pause();\n    return this[_load]().catch(er => er).then(er => {\n      this.loading = false;\n      this.loadErr = er;\n      if (!er && this.config.get('force')) this.log.warn('using --force', 'Recommended protections disabled.');\n      process.emit('timeEnd', 'npm:load');\n      this.emit('load', er);\n    });\n  }\n\n  get loaded() {\n    return this.config.loaded;\n  }\n\n  get title() {\n    return this[_title];\n  }\n\n  set title(t) {\n    process.title = t;\n    this[_title] = t;\n  }\n\n  async [_load]() {\n    process.emit('time', 'npm:load:whichnode');\n    const node = await which(process.argv[0]).catch(er => null);\n    process.emit('timeEnd', 'npm:load:whichnode');\n\n    if (node && node.toUpperCase() !== process.execPath.toUpperCase()) {\n      log.verbose('node symlink', node);\n      process.execPath = node;\n      this.config.execPath = node;\n    }\n\n    process.emit('time', 'npm:load:configload');\n    await this.config.load();\n    process.emit('timeEnd', 'npm:load:configload');\n    this.argv = this.config.parsedArgv.remain; // note: this MUST be shorter than the actual argv length, because it\n    // uses the same memory, so node will truncate it if it's too long.\n    // if it's a token revocation, then the argv contains a secret, so\n    // don't show that.  (Regrettable historical choice to put it there.)\n    // Any other secrets are configs only, so showing only the positional\n    // args keeps those from being leaked.\n\n    process.emit('time', 'npm:load:setTitle');\n    const tokrev = deref(this.argv[0]) === 'token' && this.argv[1] === 'revoke';\n    this.title = tokrev ? 'npm token revoke' + (this.argv[2] ? ' ***' : '') : ['npm', ...this.argv].join(' ');\n    process.emit('timeEnd', 'npm:load:setTitle');\n    process.emit('time', 'npm:load:setupLog');\n    this.color = setupLog(this.config);\n    process.emit('timeEnd', 'npm:load:setupLog');\n    process.env.COLOR = this.color ? '1' : '0';\n    process.emit('time', 'npm:load:cleanupLog');\n    cleanUpLogFiles(this.cache, this.config.get('logs-max'), log.warn);\n    process.emit('timeEnd', 'npm:load:cleanupLog');\n    log.resume();\n    process.emit('time', 'npm:load:configScope');\n    const configScope = this.config.get('scope');\n    if (configScope && !/^@/.test(configScope)) this.config.set('scope', `@${configScope}`, this.config.find('scope'));\n    process.emit('timeEnd', 'npm:load:configScope');\n    process.emit('time', 'npm:load:projectScope');\n    this.projectScope = this.config.get('scope') || getProjectScope(this.prefix);\n    process.emit('timeEnd', 'npm:load:projectScope');\n  }\n\n  get flatOptions() {\n    const {\n      flat\n    } = this.config;\n    if (this.command) flat.npmCommand = this.command;\n    return flat;\n  }\n\n  get lockfileVersion() {\n    return 2;\n  }\n\n  get log() {\n    return log;\n  }\n\n  get cache() {\n    return this.config.get('cache');\n  }\n\n  set cache(r) {\n    this.config.set('cache', r);\n  }\n\n  get globalPrefix() {\n    return this.config.globalPrefix;\n  }\n\n  set globalPrefix(r) {\n    this.config.globalPrefix = r;\n  }\n\n  get localPrefix() {\n    return this.config.localPrefix;\n  }\n\n  set localPrefix(r) {\n    this.config.localPrefix = r;\n  }\n\n  get globalDir() {\n    return process.platform !== 'win32' ? resolve(this.globalPrefix, 'lib', 'node_modules') : resolve(this.globalPrefix, 'node_modules');\n  }\n\n  get localDir() {\n    return resolve(this.localPrefix, 'node_modules');\n  }\n\n  get dir() {\n    return this.config.get('global') ? this.globalDir : this.localDir;\n  }\n\n  get globalBin() {\n    const b = this.globalPrefix;\n    return process.platform !== 'win32' ? resolve(b, 'bin') : b;\n  }\n\n  get localBin() {\n    return resolve(this.dir, '.bin');\n  }\n\n  get bin() {\n    return this.config.get('global') ? this.globalBin : this.localBin;\n  }\n\n  get prefix() {\n    return this.config.get('global') ? this.globalPrefix : this.localPrefix;\n  }\n\n  set prefix(r) {\n    const k = this.config.get('global') ? 'globalPrefix' : 'localPrefix';\n    this[k] = r;\n  }\n\n  get usage() {\n    return usage(this);\n  } // XXX add logging to see if we actually use this\n\n\n  get tmp() {\n    if (!this[_tmpFolder]) {\n      const rand = require('crypto').randomBytes(4).toString('hex');\n\n      this[_tmpFolder] = `npm-${process.pid}-${rand}`;\n    }\n\n    return resolve(this.config.get('tmp'), this[_tmpFolder]);\n  } // output to stdout in a progress bar compatible way\n\n\n  output(...msg) {\n    this.log.clearProgress();\n    console.log(...msg);\n    this.log.showProgress();\n  }\n\n}(); // now load everything required by the class methods\n\nconst log = require('npmlog');\n\nconst {\n  promisify\n} = require('util');\n\nconst which = promisify(require('which'));\n\nconst deref = require('./utils/deref-command.js');\n\nconst setupLog = require('./utils/setup-log.js');\n\nconst cleanUpLogFiles = require('./utils/cleanup-log-files.js');\n\nconst getProjectScope = require('./utils/get-project-scope.js');\n\nif (require.main === module) require('./cli.js')(process);","map":{"version":3,"sources":["/Users/kaelen/nsc-mds/node_modules/npm/lib/npm.js"],"names":["EventEmitter","require","resolve","dirname","Config","gracefulify","procLogListener","proxyCmds","Proxy","get","target","cmd","actual","deref","Reflect","has","Impl","impl","npm","args","cb","_runCmd","attr","receiver","definitions","flatten","shorthands","shellouts","usage","warnedNonDashArg","Symbol","_load","_tmpFolder","_title","module","exports","constructor","started","Date","now","command","commands","process","emit","version","config","npmPath","__dirname","title","updateNotification","shelloutCommands","c","loaded","Error","env","npm_command","filter","arg","test","forEach","log","error","workspacesEnabled","workspacesFilters","filterByWorkspaces","length","output","execWorkspaces","er","exec","load","TypeError","once","loadErr","loading","pause","catch","then","warn","t","node","which","argv","toUpperCase","execPath","verbose","parsedArgv","remain","tokrev","join","color","setupLog","COLOR","cleanUpLogFiles","cache","resume","configScope","set","find","projectScope","getProjectScope","prefix","flatOptions","flat","npmCommand","lockfileVersion","r","globalPrefix","localPrefix","globalDir","platform","localDir","dir","globalBin","b","localBin","bin","k","tmp","rand","randomBytes","toString","pid","msg","clearProgress","console","showProgress","promisify","main"],"mappings":"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","sourcesContent":["// The order of the code in this file is relevant, because a lot of things\n// require('npm.js'), but also we need to use some of those modules.  So,\n// we define and instantiate the singleton ahead of loading any modules\n// required for its methods.\n\n// these are all dependencies used in the ctor\nconst EventEmitter = require('events')\nconst { resolve, dirname } = require('path')\nconst Config = require('@npmcli/config')\n\n// Patch the global fs module here at the app level\nrequire('graceful-fs').gracefulify(require('fs'))\n\nconst procLogListener = require('./utils/proc-log-listener.js')\n\nconst proxyCmds = new Proxy({}, {\n  get: (target, cmd) => {\n    const actual = deref(cmd)\n    if (actual && !Reflect.has(target, actual)) {\n      const Impl = require(`./${actual}.js`)\n      const impl = new Impl(npm)\n      // Our existing npm.commands[x] act like a function with attributes, but\n      // our modules have non-inumerable attributes so we can't just assign\n      // them to an anonymous function like we used to.  This acts like that\n      // old way of doing things, until we can make breaking changes to the\n      // npm.commands[x] api\n      target[actual] = new Proxy(\n        (args, cb) => npm[_runCmd](actual, impl, args, cb),\n        {\n          get: (target, attr, receiver) => {\n            return Reflect.get(impl, attr, receiver)\n          },\n        })\n    }\n    return target[actual]\n  },\n})\n\nconst { definitions, flatten, shorthands } = require('./utils/config/index.js')\nconst { shellouts } = require('./utils/cmd-list.js')\nconst usage = require('./utils/npm-usage.js')\n\nlet warnedNonDashArg = false\nconst _runCmd = Symbol('_runCmd')\nconst _load = Symbol('_load')\nconst _tmpFolder = Symbol('_tmpFolder')\nconst _title = Symbol('_title')\nconst npm = module.exports = new class extends EventEmitter {\n  constructor () {\n    super()\n    require('./utils/perf.js')\n    this.started = Date.now()\n    this.command = null\n    this.commands = proxyCmds\n    procLogListener()\n    process.emit('time', 'npm')\n    this.version = require('../package.json').version\n    this.config = new Config({\n      npmPath: dirname(__dirname),\n      definitions,\n      flatten,\n      shorthands,\n    })\n    this[_title] = process.title\n    this.updateNotification = null\n  }\n\n  get shelloutCommands () {\n    return shellouts\n  }\n\n  deref (c) {\n    return deref(c)\n  }\n\n  // this will only ever be called with cmd set to the canonical command name\n  [_runCmd] (cmd, impl, args, cb) {\n    if (!this.loaded) {\n      throw new Error(\n        'Call npm.load(cb) before using this command.\\n' +\n        'See the README.md or bin/npm-cli.js for example usage.'\n      )\n    }\n\n    process.emit('time', `command:${cmd}`)\n    // since 'test', 'start', 'stop', etc. commands re-enter this function\n    // to call the run-script command, we need to only set it one time.\n    if (!this.command) {\n      process.env.npm_command = cmd\n      this.command = cmd\n    }\n\n    // Options are prefixed by a hyphen-minus (-, \\u2d).\n    // Other dash-type chars look similar but are invalid.\n    if (!warnedNonDashArg) {\n      args.filter(arg => /^[\\u2010-\\u2015\\u2212\\uFE58\\uFE63\\uFF0D]/.test(arg))\n        .forEach(arg => {\n          warnedNonDashArg = true\n          log.error('arg', 'Argument starts with non-ascii dash, this is probably invalid:', arg)\n        })\n    }\n\n    const workspacesEnabled = this.config.get('workspaces')\n    const workspacesFilters = this.config.get('workspace')\n    const filterByWorkspaces = workspacesEnabled || workspacesFilters.length > 0\n\n    if (this.config.get('usage')) {\n      this.output(impl.usage)\n      cb()\n    } else if (filterByWorkspaces) {\n      impl.execWorkspaces(args, this.config.get('workspace'), er => {\n        process.emit('timeEnd', `command:${cmd}`)\n        cb(er)\n      })\n    } else {\n      impl.exec(args, er => {\n        process.emit('timeEnd', `command:${cmd}`)\n        cb(er)\n      })\n    }\n  }\n\n  // call with parsed CLI options and a callback when done loading\n  // XXX promisify this and stop taking a callback\n  load (cb) {\n    if (!cb || typeof cb !== 'function')\n      throw new TypeError('must call as: npm.load(callback)')\n\n    this.once('load', cb)\n    if (this.loaded || this.loadErr) {\n      this.emit('load', this.loadErr)\n      return\n    }\n    if (this.loading)\n      return\n\n    this.loading = true\n\n    process.emit('time', 'npm:load')\n    this.log.pause()\n    return this[_load]().catch(er => er).then((er) => {\n      this.loading = false\n      this.loadErr = er\n      if (!er && this.config.get('force'))\n        this.log.warn('using --force', 'Recommended protections disabled.')\n\n      process.emit('timeEnd', 'npm:load')\n      this.emit('load', er)\n    })\n  }\n\n  get loaded () {\n    return this.config.loaded\n  }\n\n  get title () {\n    return this[_title]\n  }\n\n  set title (t) {\n    process.title = t\n    this[_title] = t\n  }\n\n  async [_load] () {\n    process.emit('time', 'npm:load:whichnode')\n    const node = await which(process.argv[0]).catch(er => null)\n    process.emit('timeEnd', 'npm:load:whichnode')\n    if (node && node.toUpperCase() !== process.execPath.toUpperCase()) {\n      log.verbose('node symlink', node)\n      process.execPath = node\n      this.config.execPath = node\n    }\n\n    process.emit('time', 'npm:load:configload')\n    await this.config.load()\n    process.emit('timeEnd', 'npm:load:configload')\n\n    this.argv = this.config.parsedArgv.remain\n    // note: this MUST be shorter than the actual argv length, because it\n    // uses the same memory, so node will truncate it if it's too long.\n    // if it's a token revocation, then the argv contains a secret, so\n    // don't show that.  (Regrettable historical choice to put it there.)\n    // Any other secrets are configs only, so showing only the positional\n    // args keeps those from being leaked.\n    process.emit('time', 'npm:load:setTitle')\n    const tokrev = deref(this.argv[0]) === 'token' && this.argv[1] === 'revoke'\n    this.title = tokrev ? 'npm token revoke' + (this.argv[2] ? ' ***' : '')\n      : ['npm', ...this.argv].join(' ')\n    process.emit('timeEnd', 'npm:load:setTitle')\n\n    process.emit('time', 'npm:load:setupLog')\n    this.color = setupLog(this.config)\n    process.emit('timeEnd', 'npm:load:setupLog')\n    process.env.COLOR = this.color ? '1' : '0'\n\n    process.emit('time', 'npm:load:cleanupLog')\n    cleanUpLogFiles(this.cache, this.config.get('logs-max'), log.warn)\n    process.emit('timeEnd', 'npm:load:cleanupLog')\n\n    log.resume()\n\n    process.emit('time', 'npm:load:configScope')\n    const configScope = this.config.get('scope')\n    if (configScope && !/^@/.test(configScope))\n      this.config.set('scope', `@${configScope}`, this.config.find('scope'))\n    process.emit('timeEnd', 'npm:load:configScope')\n\n    process.emit('time', 'npm:load:projectScope')\n    this.projectScope = this.config.get('scope') ||\n      getProjectScope(this.prefix)\n    process.emit('timeEnd', 'npm:load:projectScope')\n  }\n\n  get flatOptions () {\n    const { flat } = this.config\n    if (this.command)\n      flat.npmCommand = this.command\n    return flat\n  }\n\n  get lockfileVersion () {\n    return 2\n  }\n\n  get log () {\n    return log\n  }\n\n  get cache () {\n    return this.config.get('cache')\n  }\n\n  set cache (r) {\n    this.config.set('cache', r)\n  }\n\n  get globalPrefix () {\n    return this.config.globalPrefix\n  }\n\n  set globalPrefix (r) {\n    this.config.globalPrefix = r\n  }\n\n  get localPrefix () {\n    return this.config.localPrefix\n  }\n\n  set localPrefix (r) {\n    this.config.localPrefix = r\n  }\n\n  get globalDir () {\n    return process.platform !== 'win32'\n      ? resolve(this.globalPrefix, 'lib', 'node_modules')\n      : resolve(this.globalPrefix, 'node_modules')\n  }\n\n  get localDir () {\n    return resolve(this.localPrefix, 'node_modules')\n  }\n\n  get dir () {\n    return (this.config.get('global')) ? this.globalDir : this.localDir\n  }\n\n  get globalBin () {\n    const b = this.globalPrefix\n    return process.platform !== 'win32' ? resolve(b, 'bin') : b\n  }\n\n  get localBin () {\n    return resolve(this.dir, '.bin')\n  }\n\n  get bin () {\n    return this.config.get('global') ? this.globalBin : this.localBin\n  }\n\n  get prefix () {\n    return this.config.get('global') ? this.globalPrefix : this.localPrefix\n  }\n\n  set prefix (r) {\n    const k = this.config.get('global') ? 'globalPrefix' : 'localPrefix'\n    this[k] = r\n  }\n\n  get usage () {\n    return usage(this)\n  }\n\n  // XXX add logging to see if we actually use this\n  get tmp () {\n    if (!this[_tmpFolder]) {\n      const rand = require('crypto').randomBytes(4).toString('hex')\n      this[_tmpFolder] = `npm-${process.pid}-${rand}`\n    }\n    return resolve(this.config.get('tmp'), this[_tmpFolder])\n  }\n\n  // output to stdout in a progress bar compatible way\n  output (...msg) {\n    this.log.clearProgress()\n    console.log(...msg)\n    this.log.showProgress()\n  }\n}()\n\n// now load everything required by the class methods\n\nconst log = require('npmlog')\nconst { promisify } = require('util')\n\nconst which = promisify(require('which'))\n\nconst deref = require('./utils/deref-command.js')\nconst setupLog = require('./utils/setup-log.js')\nconst cleanUpLogFiles = require('./utils/cleanup-log-files.js')\nconst getProjectScope = require('./utils/get-project-scope.js')\n\nif (require.main === module)\n  require('./cli.js')(process)\n"]},"metadata":{},"sourceType":"script"}