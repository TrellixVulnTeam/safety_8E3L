{"ast":null,"code":"const util = require('util');\n\nconst log = require('npmlog');\n\nconst pacote = require('pacote');\n\nconst libpack = require('libnpmpack');\n\nconst npa = require('npm-package-arg');\n\nconst getWorkspaces = require('./workspaces/get-workspaces.js');\n\nconst {\n  getContents,\n  logTar\n} = require('./utils/tar.js');\n\nconst writeFile = util.promisify(require('fs').writeFile);\n\nconst BaseCommand = require('./base-command.js');\n\nclass Pack extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Create a tarball from a package';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'pack';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['dry-run', 'workspace', 'workspaces'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['[[<@scope>/]<pkg>...]'];\n  }\n\n  exec(args, cb) {\n    this.pack(args).then(() => cb()).catch(cb);\n  }\n\n  execWorkspaces(args, filters, cb) {\n    this.packWorkspaces(args, filters).then(() => cb()).catch(cb);\n  }\n\n  async pack(args) {\n    if (args.length === 0) args = ['.'];\n    const unicode = this.npm.config.get('unicode'); // clone the opts because pacote mutates it with resolved/integrity\n\n    const tarballs = await Promise.all(args.map(async arg => {\n      const spec = npa(arg);\n      const dryRun = this.npm.config.get('dry-run');\n      const manifest = await pacote.manifest(spec, this.npm.flatOptions);\n      const filename = `${manifest.name}-${manifest.version}.tgz`.replace(/^@/, '').replace(/\\//, '-');\n      const tarballData = await libpack(arg, this.npm.flatOptions);\n      const pkgContents = await getContents(manifest, tarballData);\n      if (!dryRun) await writeFile(filename, tarballData);\n      return pkgContents;\n    }));\n\n    for (const tar of tarballs) {\n      logTar(tar, {\n        log,\n        unicode\n      });\n      this.npm.output(tar.filename.replace(/^@/, '').replace(/\\//, '-'));\n    }\n  }\n\n  async packWorkspaces(args, filters) {\n    // If they either ask for nothing, or explicitly include '.' in the args,\n    // we effectively translate that into each workspace requested\n    const useWorkspaces = args.length === 0 || args.includes('.');\n\n    if (!useWorkspaces) {\n      this.npm.log.warn('Ignoring workspaces for specified package(s)');\n      return this.pack(args);\n    }\n\n    const workspaces = await getWorkspaces(filters, {\n      path: this.npm.localPrefix\n    });\n    return this.pack([...workspaces.values(), ...args.filter(a => a !== '.')]);\n  }\n\n}\n\nmodule.exports = Pack;","map":{"version":3,"sources":["/Users/kaelen/nsc-mds/node_modules/npm/lib/pack.js"],"names":["util","require","log","pacote","libpack","npa","getWorkspaces","getContents","logTar","writeFile","promisify","BaseCommand","Pack","description","name","params","usage","exec","args","cb","pack","then","catch","execWorkspaces","filters","packWorkspaces","length","unicode","npm","config","get","tarballs","Promise","all","map","arg","spec","dryRun","manifest","flatOptions","filename","version","replace","tarballData","pkgContents","tar","output","useWorkspaces","includes","warn","workspaces","path","localPrefix","values","filter","a","module","exports"],"mappings":"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","sourcesContent":["const util = require('util')\nconst log = require('npmlog')\nconst pacote = require('pacote')\nconst libpack = require('libnpmpack')\nconst npa = require('npm-package-arg')\nconst getWorkspaces = require('./workspaces/get-workspaces.js')\n\nconst { getContents, logTar } = require('./utils/tar.js')\n\nconst writeFile = util.promisify(require('fs').writeFile)\n\nconst BaseCommand = require('./base-command.js')\n\nclass Pack extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Create a tarball from a package'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'pack'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['dry-run', 'workspace', 'workspaces']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[[<@scope>/]<pkg>...]']\n  }\n\n  exec (args, cb) {\n    this.pack(args).then(() => cb()).catch(cb)\n  }\n\n  execWorkspaces (args, filters, cb) {\n    this.packWorkspaces(args, filters).then(() => cb()).catch(cb)\n  }\n\n  async pack (args) {\n    if (args.length === 0)\n      args = ['.']\n\n    const unicode = this.npm.config.get('unicode')\n\n    // clone the opts because pacote mutates it with resolved/integrity\n    const tarballs = await Promise.all(args.map(async (arg) => {\n      const spec = npa(arg)\n      const dryRun = this.npm.config.get('dry-run')\n      const manifest = await pacote.manifest(spec, this.npm.flatOptions)\n      const filename = `${manifest.name}-${manifest.version}.tgz`\n        .replace(/^@/, '').replace(/\\//, '-')\n      const tarballData = await libpack(arg, this.npm.flatOptions)\n      const pkgContents = await getContents(manifest, tarballData)\n\n      if (!dryRun)\n        await writeFile(filename, tarballData)\n\n      return pkgContents\n    }))\n\n    for (const tar of tarballs) {\n      logTar(tar, { log, unicode })\n      this.npm.output(tar.filename.replace(/^@/, '').replace(/\\//, '-'))\n    }\n  }\n\n  async packWorkspaces (args, filters) {\n    // If they either ask for nothing, or explicitly include '.' in the args,\n    // we effectively translate that into each workspace requested\n\n    const useWorkspaces = args.length === 0 || args.includes('.')\n\n    if (!useWorkspaces) {\n      this.npm.log.warn('Ignoring workspaces for specified package(s)')\n      return this.pack(args)\n    }\n\n    const workspaces =\n      await getWorkspaces(filters, { path: this.npm.localPrefix })\n    return this.pack([...workspaces.values(), ...args.filter(a => a !== '.')])\n  }\n}\nmodule.exports = Pack\n"]},"metadata":{},"sourceType":"script"}