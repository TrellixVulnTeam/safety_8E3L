{"ast":null,"code":"const fs = require('fs');\n\nconst util = require('util');\n\nconst readdir = util.promisify(fs.readdir);\n\nconst {\n  resolve\n} = require('path');\n\nconst Arborist = require('@npmcli/arborist');\n\nconst npa = require('npm-package-arg');\n\nconst rpj = require('read-package-json-fast');\n\nconst semver = require('semver');\n\nconst reifyFinish = require('./utils/reify-finish.js');\n\nconst BaseCommand = require('./base-command.js');\n\nclass Link extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Symlink a package folder';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'link';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['(in package dir)', '[<@scope>/]<pkg>[@<version>]'];\n  }\n\n  async completion(opts) {\n    const dir = this.npm.globalDir;\n    const files = await readdir(dir);\n    return files.filter(f => !/^[._-]/.test(f));\n  }\n\n  exec(args, cb) {\n    this.link(args).then(() => cb()).catch(cb);\n  }\n\n  async link(args) {\n    if (this.npm.config.get('global')) {\n      throw Object.assign(new Error('link should never be --global.\\n' + 'Please re-run this command with --local'), {\n        code: 'ELINKGLOBAL'\n      });\n    } // link with no args: symlink the folder to the global location\n    // link with package arg: symlink the global to the local\n\n\n    args = args.filter(a => resolve(a) !== this.npm.prefix);\n    return args.length ? this.linkInstall(args) : this.linkPkg();\n  }\n\n  async linkInstall(args) {\n    // load current packages from the global space,\n    // and then add symlinks installs locally\n    const globalTop = resolve(this.npm.globalDir, '..');\n    const globalOpts = { ...this.npm.flatOptions,\n      path: globalTop,\n      log: this.npm.log,\n      global: true,\n      prune: false\n    };\n    const globalArb = new Arborist(globalOpts); // get only current top-level packages from the global space\n\n    const globals = await globalArb.loadActual({\n      filter: (node, kid) => !node.isRoot || args.some(a => npa(a).name === kid)\n    }); // any extra arg that is missing from the current\n    // global space should be reified there first\n\n    const missing = this.missingArgsFromTree(globals, args);\n\n    if (missing.length) {\n      await globalArb.reify({ ...globalOpts,\n        add: missing\n      });\n    } // get a list of module names that should be linked in the local prefix\n\n\n    const names = [];\n\n    for (const a of args) {\n      const arg = npa(a);\n      names.push(arg.type === 'directory' ? (await rpj(resolve(arg.fetchSpec, 'package.json'))).name : arg.name);\n    } // npm link should not save=true by default unless you're\n    // using any of --save-dev or other types\n\n\n    const save = Boolean(this.npm.config.find('save') !== 'default' || this.npm.config.get('save-optional') || this.npm.config.get('save-peer') || this.npm.config.get('save-dev') || this.npm.config.get('save-prod')); // create a new arborist instance for the local prefix and\n    // reify all the pending names as symlinks there\n\n    const localArb = new Arborist({ ...this.npm.flatOptions,\n      log: this.npm.log,\n      path: this.npm.prefix,\n      save\n    });\n    await localArb.reify({ ...this.npm.flatOptions,\n      path: this.npm.prefix,\n      log: this.npm.log,\n      add: names.map(l => `file:${resolve(globalTop, 'node_modules', l)}`),\n      save\n    });\n    await reifyFinish(this.npm, localArb);\n  }\n\n  async linkPkg() {\n    const globalTop = resolve(this.npm.globalDir, '..');\n    const arb = new Arborist({ ...this.npm.flatOptions,\n      path: globalTop,\n      log: this.npm.log,\n      global: true\n    });\n    await arb.reify({\n      add: [`file:${this.npm.prefix}`],\n      log: this.npm.log\n    });\n    await reifyFinish(this.npm, arb);\n  } // Returns a list of items that can't be fulfilled by\n  // things found in the current arborist inventory\n\n\n  missingArgsFromTree(tree, args) {\n    if (tree.isLink) return this.missingArgsFromTree(tree.target, args);\n    const foundNodes = [];\n    const missing = args.filter(a => {\n      const arg = npa(a);\n      const nodes = tree.children.values();\n      const argFound = [...nodes].every(node => {\n        // TODO: write tests for unmatching version specs, this is hard to test\n        // atm but should be simple once we have a mocked registry again\n        if (arg.name !== node.name\n        /* istanbul ignore next */\n        || arg.version && !semver.satisfies(node.version, arg.version)) {\n          foundNodes.push(node);\n          return true;\n        }\n      });\n      return argFound;\n    }); // remote nodes from the loaded tree in order\n    // to avoid dropping them later when reifying\n\n    for (const node of foundNodes) node.parent = null;\n\n    return missing;\n  }\n\n}\n\nmodule.exports = Link;","map":{"version":3,"sources":["/Users/kaelen/nsc-mds/node_modules/npm/lib/link.js"],"names":["fs","require","util","readdir","promisify","resolve","Arborist","npa","rpj","semver","reifyFinish","BaseCommand","Link","description","name","usage","completion","opts","dir","npm","globalDir","files","filter","f","test","exec","args","cb","link","then","catch","config","get","Object","assign","Error","code","a","prefix","length","linkInstall","linkPkg","globalTop","globalOpts","flatOptions","path","log","global","prune","globalArb","globals","loadActual","node","kid","isRoot","some","missing","missingArgsFromTree","reify","add","names","arg","push","type","fetchSpec","save","Boolean","find","localArb","map","l","arb","tree","isLink","target","foundNodes","nodes","children","values","argFound","every","version","satisfies","parent","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs')\nconst util = require('util')\nconst readdir = util.promisify(fs.readdir)\nconst { resolve } = require('path')\n\nconst Arborist = require('@npmcli/arborist')\nconst npa = require('npm-package-arg')\nconst rpj = require('read-package-json-fast')\nconst semver = require('semver')\n\nconst reifyFinish = require('./utils/reify-finish.js')\n\nconst BaseCommand = require('./base-command.js')\nclass Link extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Symlink a package folder'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'link'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return [\n      '(in package dir)',\n      '[<@scope>/]<pkg>[@<version>]',\n    ]\n  }\n\n  async completion (opts) {\n    const dir = this.npm.globalDir\n    const files = await readdir(dir)\n    return files.filter(f => !/^[._-]/.test(f))\n  }\n\n  exec (args, cb) {\n    this.link(args).then(() => cb()).catch(cb)\n  }\n\n  async link (args) {\n    if (this.npm.config.get('global')) {\n      throw Object.assign(\n        new Error(\n          'link should never be --global.\\n' +\n          'Please re-run this command with --local'\n        ),\n        { code: 'ELINKGLOBAL' }\n      )\n    }\n\n    // link with no args: symlink the folder to the global location\n    // link with package arg: symlink the global to the local\n    args = args.filter(a => resolve(a) !== this.npm.prefix)\n    return args.length\n      ? this.linkInstall(args)\n      : this.linkPkg()\n  }\n\n  async linkInstall (args) {\n    // load current packages from the global space,\n    // and then add symlinks installs locally\n    const globalTop = resolve(this.npm.globalDir, '..')\n    const globalOpts = {\n      ...this.npm.flatOptions,\n      path: globalTop,\n      log: this.npm.log,\n      global: true,\n      prune: false,\n    }\n    const globalArb = new Arborist(globalOpts)\n\n    // get only current top-level packages from the global space\n    const globals = await globalArb.loadActual({\n      filter: (node, kid) =>\n        !node.isRoot || args.some(a => npa(a).name === kid),\n    })\n\n    // any extra arg that is missing from the current\n    // global space should be reified there first\n    const missing = this.missingArgsFromTree(globals, args)\n    if (missing.length) {\n      await globalArb.reify({\n        ...globalOpts,\n        add: missing,\n      })\n    }\n\n    // get a list of module names that should be linked in the local prefix\n    const names = []\n    for (const a of args) {\n      const arg = npa(a)\n      names.push(\n        arg.type === 'directory'\n          ? (await rpj(resolve(arg.fetchSpec, 'package.json'))).name\n          : arg.name\n      )\n    }\n\n    // npm link should not save=true by default unless you're\n    // using any of --save-dev or other types\n    const save =\n      Boolean(\n        this.npm.config.find('save') !== 'default' ||\n        this.npm.config.get('save-optional') ||\n        this.npm.config.get('save-peer') ||\n        this.npm.config.get('save-dev') ||\n        this.npm.config.get('save-prod')\n      )\n\n    // create a new arborist instance for the local prefix and\n    // reify all the pending names as symlinks there\n    const localArb = new Arborist({\n      ...this.npm.flatOptions,\n      log: this.npm.log,\n      path: this.npm.prefix,\n      save,\n    })\n    await localArb.reify({\n      ...this.npm.flatOptions,\n      path: this.npm.prefix,\n      log: this.npm.log,\n      add: names.map(l => `file:${resolve(globalTop, 'node_modules', l)}`),\n      save,\n    })\n\n    await reifyFinish(this.npm, localArb)\n  }\n\n  async linkPkg () {\n    const globalTop = resolve(this.npm.globalDir, '..')\n    const arb = new Arborist({\n      ...this.npm.flatOptions,\n      path: globalTop,\n      log: this.npm.log,\n      global: true,\n    })\n    await arb.reify({\n      add: [`file:${this.npm.prefix}`],\n      log: this.npm.log,\n    })\n    await reifyFinish(this.npm, arb)\n  }\n\n  // Returns a list of items that can't be fulfilled by\n  // things found in the current arborist inventory\n  missingArgsFromTree (tree, args) {\n    if (tree.isLink)\n      return this.missingArgsFromTree(tree.target, args)\n\n    const foundNodes = []\n    const missing = args.filter(a => {\n      const arg = npa(a)\n      const nodes = tree.children.values()\n      const argFound = [...nodes].every(node => {\n        // TODO: write tests for unmatching version specs, this is hard to test\n        // atm but should be simple once we have a mocked registry again\n        if (arg.name !== node.name /* istanbul ignore next */ || (\n          arg.version &&\n          !semver.satisfies(node.version, arg.version)\n        )) {\n          foundNodes.push(node)\n          return true\n        }\n      })\n      return argFound\n    })\n\n    // remote nodes from the loaded tree in order\n    // to avoid dropping them later when reifying\n    for (const node of foundNodes)\n      node.parent = null\n\n    return missing\n  }\n}\nmodule.exports = Link\n"]},"metadata":{},"sourceType":"script"}